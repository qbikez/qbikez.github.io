<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title>https://github.com/qbikez</title>
   
   <link>http://heavymetaldev.com</link>
   <description>Developer stories from the trenches.</description>
   <language>en-uk</language>
   <managingEditor> qbik</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Migrating Asp.Net 5 rc1 to Asp.Net Core 1.0.0</title>
	  <link>//dnx-to-dotnet-migration</link>
	  <author>qbik</author>
	  <pubDate>2016-07-30T12:18:00+02:00</pubDate>
	  <guid>//dnx-to-dotnet-migration</guid>
	  <description><![CDATA[
	     <p>Net Core 1.0.0 has been released some time ago and is here to stay. Maybe it&#39;s time to move &quot;old&quot; <code>dnx</code> projects forward and switch to <code>dotnet</code>? Because, as someone avesome said: <em>new is always better!</em></p>

<p><a href="http://www.smashinglists.com/top-10-barney-stinson-quotes/"><img src="assets/images/new-is-always-better.gif" alt="New is always better"></a></p>

<p>There is a pretty good official <a href="https://docs.asp.net/en/latest/migration/rc1-to-rtm.html">Migration gude</a>, but if you want some more detailed explanation, read on.</p>

<h2 id="what-39-s-new">What&#39;s new?</h2>

<p>The first change you will immediately notice are the commandline tools. <code>Dnu</code> and <code>dnx</code> were replaced with one, omnipotent, extensible <a href="http://github.com/dotnet/cli"><code>dotnet</code></a> command. <code>Dnvm</code> is gone too - installation is handled by installers or install scripts and the proper version selection is baked right into <code>dotnet</code>. You can still have multiple versions of SDK installed, but there is nothing similar to <code>dnvm use</code> - you have to specify the desired version in <code>global.json</code> file.</p>

<h2 id="how-stable-is-stable">How stable is <em>stable</em>?</h2>

<p>Versioning of .Net Core (the framework) and versioning of commandline tools (SDK) are two different stories now. As .Net Core by itself is RTM, CLI tools are still in preview. </p>

<p>But you cannot compile anything without the toolchain, right? Right.. and once you manage to compile and run your code against .Net Core RTM, then it should be stable from there and can be safely deployed on a server.</p>

<blockquote>
<p>It&#39;s also worth noting that <a href="https://blogs.msdn.microsoft.com/webdev/2016/06/27/announcing-asp-net-core-1-0/">ASP.NET Core 1.0</a> and <a href="https://blogs.msdn.microsoft.com/dotnet/2016/06/27/entity-framework-core-1-0-0-available/">Entity Framework Core 1.0</a> have also been released - so you&#39;re not left with a stable core framework and unstable libraries.</p>
</blockquote>

<h2 id="what-has-changed">What has changed?</h2>

<p>These are a few areas that have changed. Some of them will require more work to get them working, some will be just a matter of simple find-and-replace:</p>

<ul>
<li><em>project.json</em>

<ul>
<li>project dependencies</li>
<li>commands =&gt; tools</li>
<li>framework monikers</li>
<li>some minor section reorganizations</li>
</ul></li>
<li>application loading and startup model</li>
<li>ASP.NET Core - namespace, nuget versions and some APIs</li>
</ul>

<h3 id="project-json-file"><em>Project.json</em> file</h3>

<h4 id="project-dependencies">Project dependencies</h4>

<p>For me, the most important breaking change in <code>project.json</code> file (at least for me) is the notion of project dependencies. Before, if you wanted to reference another project in your source tree, you could just specify an empty version string to hint the tooling that this is a project dependency. Now, you need to explicitly name it as a project dependency, like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">"dependencies": {
    "my.other.project": { "target": "project" }
}
</code></pre></div>
<p>This will instruct <code>dotnet</code> to look only for a source project, not a package. Althouth this is fairly easy to fix, it immediatly broken most of my projects compilation, because I had project references with empty version strings all over the place.</p>

<blockquote>
<p>You may also specify a version number, just like with package dependencies and if you have a project with that name in one of the <code>src</code> directories listed in <code>global.json</code>, it will also be treated as a project dependency. In case you want to explicitly avoid thatand force using a package, you can specify <code>&quot;target&quot;: &quot;package&quot;</code>. </p>
</blockquote>

<h4 id="commands-vs-tools">Commands vs. Tools</h4>

<p><code>Commands</code> section has now been removed - instead there is <code>tools</code> section now, but it works quite differently than old commands. Since the <a href="#application-startup">application startup model has changed</a> and is now more bare-bone - so are the tools. <a href="https://docs.microsoft.com/en-us/dotnet/articles/core/tools/extensibility">.Net Core CLI extensibility model</a> explains in-depth, how the tools work. </p>

<p>There are basically 3 types of tools that can extend <code>dotnet</code> command.</p>

<p>The simplest one is <code>PATH</code> tools - every executable file named <code>dotnet-something</code> that is on <code>PATH</code> can be called as <code>dotnet something</code> - pretty much how git does it with <a href="http://thediscoblog.com/blog/2014/03/29/custom-git-commands-in-3-steps/">git subcommands</a>. All the invocation arguments are passed to that command, then it&#39;s up to the tool to do it&#39;s work.</p>

<p>Second type of tools are the project tools that are specified in <code>tools</code> section. These are portable console appications, which are restored with <code>dotnet restore</code> and have a separate dependency graph. They can only be run in project&#39;s context. This means that when run, they can easily locate project files and outputs and manipulate them. An example of such command is <code>dotnet-publish-iis</code>.</p>

<p>This brings us to the third type of tools - tools that need to load project output binaries, like for example <code>dotnet-test-xunit</code>. As mentioned before, tools have a separate dependency graph. But in order to load project output binaries, the tool dependency graph and project dependency graph have to be unified - otherwise all sort of bad things may happen. In order to achieve this, a simple trick is made - the package in <code>tools</code> section is just a <a href="https://github.com/dotnet/cli/tree/rel/1.0.0-preview2/TestAssets/TestPackages/dotnet-dependency-tool-invoker">simple invoker</a> that loads a specific library (named excatly as the command, e.g. <code>dotnet-test-xunit</code>) from project dependencies. Because you have to add this library to project&#39;s dependencies, it is part of the overall dependency graph and is able to load project binaries. If there are any conflicts between the tool library and your project, they will come out during <code>restore</code>. </p>

<p>This works a little bit like the old <code>commands</code> section, but you cannot embed any commandline arguments in <code>project.json</code> (this part of functionality seem to be gone for good).</p>

<h4 id="scripts">Scripts</h4>

<p>The <code>scripts</code> section is still available, but the amount of available events has been drastically cut down. The only events supported now are <strong>&#39;precompile&#39;</strong> and <strong>&#39;postcompile&#39;</strong>. So, say <a href="https://github.com/dotnet/cli/issues/3436">goodbye to postrestore</a>, prepare, etc. There were a lot of cases where <em>&#39;postrestore&#39;</em> was really useful and I don&#39;t fully understand why they&#39;re gone. Hope this will be fixed in some future version of SDK or at least there will be a good replacement.</p>

<h4 id="section-renames">Section renames</h4>

<p>Other changes in <code>project.json</code> are rather cosmetic: </p>

<ul>
<li><code>compileOptions</code> were renamed to <code>buildOptions</code></li>
<li>metadata properties, like <code>summary</code>, <code>releaseNotes</code>, <code>iconUrl</code> were moved to <code>packOptions</code> section</li>
</ul>

<p>The renames are not breaking  (at least not yet) - you will just get a warning that a specific entry is deprecated and you should use the new one instead.</p>

<h4 id="frameworks">Frameworks</h4>

<p><a href="https://docs.asp.net/en/latest/migration/rc1-to-rtm.html">Migration docs</a> state that <code>dnx451</code> should be renamed to <code>net451</code>. In practice, <code>dnx451</code> still works just fine. <code>dnxcore50</code> should become <code>netcoreapp1.0</code> and must add a dependency to <code>Microsoft.NETCore.App</code> package.</p>

<p>A framework declaration in <em>project.json</em> may also include <code>imports</code> section:</p>
<div class="highlight"><pre><code class="language-" data-lang="">"frameworks": {
  "netcoreapp1.0": { 
    "imports": [ 
        "dnxcore50",
        "portable-net45+win8"
      ] 
    }
}
</code></pre></div>
<p>This allow packages supporting these frameworks to be installed in the target framework target, regardless of the compatibility rules. In other words, it&#39;s telling the package manager: <em>&quot;If you don&#39;t find a package version targeting <code>netcoreapp1.0</code> or other compatible framework, I wan&#39;t you to install a version that targets one of the imported frameworks&quot;</em>.</p>

<h3 id="tests">Tests</h3>

<p>Unit testing seems to be the area that has the most moving pieces. It is depends strongly on how dotnet runs applications. It seems like with every preview of <code>dotnet</code> tool, a matching <code>xunit</code> runner is released. And it&#39;s really easy to get confused. Fortunately, xunit team keeps <a href="https://xunit.github.io/docs/getting-started-dotnet-core.html">xunit docs</a> up to date.</p>

<p>There are 2 things you have to do to configure a unit test project:</p>

<ol>
<li><p>Reference the test tool in project dependencies, like this:</p>

<p>&quot;dependencies&quot;: {
     &quot;dotnet-test-xunit&quot;: &quot;1.0.0-rc2-192208-24&quot;
   }</p>

<p>This will include testing tool in your dependency chain.</p></li>
<li><p>Set <code>testRunner</code> property in <em>project.json</em>:</p>

<p>&quot;testRunner&quot;: &quot;xunit&quot;</p></li>
</ol>

<p>That&#39;s it. If you now run <code>dotnet test</code>, dotnet will know it should invoke <code>dotnet-test-xunit</code>. If you want to quickly create an new unit test project, you can use <code>dotnet new</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; dotnet new -t xunittest
</code></pre></div>
<blockquote>
<p>If you want to know more about <code>dotnet new</code>, there&#39;s a great post on <a href="http://www.hanselman.com/blog/ExploringDotnetNewWithNETCore.aspx">exploring <code>dotnet new</code></a> by Scott Hanselman.</p>
</blockquote>

<p>By default, it will create a project that targets .Net Core, but the CLI runner is capable of running tests which target any other framework. If you have more than one target framewrok specified, <code>dotnet test</code> will run tests for all of them.</p>

<h2 id="application-startup">Application startup <a id="application-startup"></a></h2>

<p><code>RC1</code> supported two launch modes:</p>

<ul>
<li><code>&quot;emitEntryPoint&quot;:true</code> - the application is compiled to an <code>.exe</code>, and has to have a static <code>Main</code> method. This hasn&#39;t change.</li>
<li><p><code>&quot;emitEntryPoint&quot;:false</code> - a dll project could also be run as a console app, if you included an appropriate command in <code>project.json</code>, like this:</p>

<p>&quot;commands&quot;: { &quot;run&quot;: &quot;My.Project.Name&quot; }</p></li>
</ul>

<p>In this mode, the loading process was similiar to how Asp.Net <code>Startup</code> class works. The <a href="https://github.com/aspnet/dnx/blob/brecon/rc1-update2/src/Microsoft.Dnx.ApplicationHost/Program.cs">ApplicationHost</a> was responsible for running console applications. It would look for <code>Main</code> method (non-static), create the containing class instance and inject dependencies into it&#39;s constructor, then run <code>Main</code>. This was very convienient, because you had access to things like <code>IApplicationEnvironment</code> or <code>IServiceProvider</code>. This also meant that additional work had to be done by <code>dnx</code> to locate the startup class and provide all of the dependencies. And it was kind of &quot;magic&quot; too. </p>

<p>Apart of the additional logic required in the second startup mode, there is also the issue of dependencies. <code>IServiceProvider</code> is defined in <code>Microsoft.Extensions.DependencyInjection.Abstractions</code> and to provide it, the runtime would also have to create some default instance. This adds a dependency on <code>Microsoft.Extensions.DependencyInjection</code> in the runtime - which means that your application should depend on exact same version. It may work with a newer version, but considering the rapid development of APIs in .Net Core and possible namespace/method name changes, it most probably won&#39;t. That was a problem for <code>dnx</code> - versions of you&#39;re dependencies and <code>dnx</code> version had to match (you couldn&#39;t have <code>beta5</code> dependencies and use <code>dnx</code> <code>v.1.0.0-beta4</code>).</p>

<p>Because <code>dotnet</code> is aimed to be more universal, this mode is now gone. We&#39;re back to the &quot;raw&quot; <code>static void Main</code>. So is the automatic <code>Startup</code> lookup in Asp.Net - you have to add the boilerplate code yourself). In Asp.Net Core 1.0.0, it would look like this<a id="aspnet-main"></a>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">public static void Main(string[] args)
{
    var host = new WebHostBuilder()
        .UseKestrel()
        .UseContentRoot(Directory.GetCurrentDirectory())
        .UseStartup&lt;Startup&gt;()
        .Build();

    host.Run();
}
</code></pre></div>
<p>Now, the <code>WebHostBuilder</code> is responsible for creating instance of <code>IApplicationEnvironment</code>, etc. and passing these dependencies to <code>Startup</code> class. So the <code>Startup</code> class does not have to change, the only change is in the <code>Main</code> method. </p>

<p>Some of these services that were provided in <code>dnx</code> has moved to other places, like <code>IApplicationEnvironment</code>:
<a href="https://github.com/dotnet/cli/issues/216">https://github.com/dotnet/cli/issues/216</a>, <a href="https://github.com/aspnet/Announcements/issues/171">https://github.com/aspnet/Announcements/issues/171</a>, <a href="https://github.com/aspnet/PlatformAbstractions/issues/37">https://github.com/aspnet/PlatformAbstractions/issues/37</a>. Most of them, including <code>ApplicationBasePath</code> can now be accessed by a static field: <code>Microsoft.Extensions.PlatformAbstractions.PlatformServices.Default.Application</code>. That&#39;s it for &quot;dependency injection as a first class citizen&quot; (at least for barebone console apps) and we&#39;re back to static classes.</p>

<h2 id="migration-process">Migration process</h2>

<p>In the following section I will break down the process of migration from RC1 to RTM, along with some explanation of changes and problems you might encounter. If you wan&#39;t a more step-by-step approach, see Shawn Wildermuth&#39;s <a href="https://wildermuth.com/2016/05/17/Converting-an-ASP-NET-Core-RC1-Project-to-RC2">Converting an ASP.NET Core RC1 Project to RC2</a> (RC2 <a href="https://docs.asp.net/en/latest/migration/rc2-to-rtm.html">does not differ much</a> from RTM) and the <a href="https://docs.asp.net/en/latest/migration/rc1-to-rtm.html">Official migration guide</a>.</p>

<h2 id="using-dotnet-with-old-projects">Using dotnet with old projects</h2>

<p>As mentioned before, the tooling/SDK is now completely separate from Core Framework libraries. This also means that you&#39;re dependencie versions does no longer have to match tooling version (previously, you weren&#39;t able to have a dependency on, say, <code>-beta8</code> libraries and compile with <code>-rc1</code> <em>dnu</em>). The consequence is that you can still depend on older <code>-rc1</code> libraries and use new <code>dotnet</code> commands. This gives you a little more flexibility in the migration process.</p>

<p>Let&#39;s get down to business and see, how does the migration process go. The experience can vary depending on how complicated is your project and how much (if any) dependencies does it have on .Net Core libraries. </p>

<p>We&#39;ll break it down into three types of projects:</p>

<ol>
<li>A simple library project that has no other project dependencies </li>
<li>A console application</li>
<li>Aspnet MVC application with some project dependencies</li>
<li>Tests</li>
</ol>

<h3 id="a-library-project-with-no-project-dependencies-targeting-net451-and-dnx451">A library project, with no project dependencies, targeting net451 and dnx451 <a name="library-app"></a></h3>

<p>This is the simplest case - no dependencies on other projects, only nugets, no <code>dnxcore</code>, just good old .Net Framework.</p>

<p>Surprisingly (or maybe not), <code>dotnet restore</code> and <code>dotnet build</code> have no problems. The only difference: all the required dll dependencies are copied to output <code>bin</code> folder. </p>

<h3 id="a-console-app">A console app <a name="console-app"></a></h3>

<p>Same as with a library project - no real changes needed. That is, unless you were using the startup model without <a href="#application-startup"><code>emitEntryPoint</code></a>. In that case, you have to add a static <code>Main</code> method and possibly create a dependency injection container by yourself (as described in <a href="#application-startup">Application Startup</a>).</p>

<h3 id="asp-net-mvc-application">ASP.NET MVC application <a name="mvc-app"></a></h3>

<p>A full ASP.NET MVC application will require some more work. Follow these steps:</p>

<ol>
<li>In <em>project.json</em> <code>dependendcies</code> section, make these renames:

<ul>
<li>AspNetCore namespace: <code>Microsoft.AspNet.*</code> =&gt; <code>Microsoft.AspNetCore.*</code></li>
<li>AspNet versions: <code>1.0.0-rc1*</code> =&gt; <code>1.0.0</code></li>
<li>MVC versions: <code>6.0.0-rc1*</code> =&gt; <code>1.0.0</code></li>
<li><code>Microsoft.Framework.*</code> =&gt; <code>Microsoft.Extensions.*</code></li>
</ul></li>
</ol>

<p>Some of the versions or namespaces may actually be incorrect. If there&#39;s just an issue, just try referencing the newest one (preferrably stable). Continue to fix dependencies until <code>dotnet restore</code> suceeds.
2. Get rid of <em>project.json</em> <code>commands</code> section.
3. In code, rename namespaces:
   * <code>Microsoft.AspNet.*</code> =&gt; <code>Microsoft.AspNetCore.*</code>
   * <code>Microsoft.Framework.*</code> =&gt; <code>Microsoft.Extensions.*</code>
4. Try doing <code>dotnet build</code> and fix the remaining compilation errors.
5. In <em>project.json</em> set <code>buildOptions:emitEntryPoint</code> to <code>true</code> and add <a href="#aspnet-main">static <code>Main</code> method</a> or fix the existing one.
6. In <em>projectJson</em>, set <a href="https://github.com/aspnet/cli-samples/issues/19"><code>buildOptions:preserveCompilationContext</code></a> to <code>true</code> - this is required for Razor views compilation.
7. If the project compiles, try running it. There will probably be some minor problems in views, but they should&#39;n be hard to fix. </p>

<p>If you encounter strange errors with loading dependency assemblies or anything that seems like <code>rc1</code> leftover, try <a href="#hunt-down-rc1">Hunting down rc1 references</a>.</p>

<h3 id="tests">Tests</h3>

<p>Unit testing seems to be the most moving part of the whole thing. It is a part of tooling and depends strongly on how dotnet runs applications. It seems like with every preview of <code>dotnet</code> tool, a matching <code>xunit</code> runner has to be released. And it&#39;s really easy to get confused. Fortunately, xunit team keeps the docs up to date: <a href="https://xunit.github.io/docs/getting-started-dotnet-core.html">https://xunit.github.io/docs/getting-started-dotnet-core.html</a>.</p>

<h4 id="targeting-desktop-net">Targeting desktop .NET</h4>

<p>The .NET CLI runner is capable of running tests which target desktop .NET (minimum version 4.5.1), in addition to .NET Core. To target desktop .NET, use this frameworks section instead:</p>
<div class="highlight"><pre><code class="language-" data-lang=""><span class="p">{</span><span class="w">
    </span><span class="nt">"frameworks"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"net451"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nt">"dependencies"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
                </span><span class="nt">"Microsoft.NETCore.Platforms"</span><span class="p">:</span><span class="w"> </span><span class="s2">"1.0.1"</span><span class="w">
            </span><span class="p">}</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>You can target both net4xx and netcoreapp simply by adding both frameworks together in your project.json file. When you run dotnet test with multiple framework entries, the system will run tests with <strong>all</strong> the frameworks, one after another.</p>

<h2 id="hunt-down-old-references">Hunt down old references <a id="hunt-down-rc1"></a></h2>

<p>If you have a decent dependency tree, it is possible that some of the dependencies will still be using older <code>-rc1</code> libraries. You can use <em>project.lock.json</em> to hunt them down. <em>project.lock.json</em> contains the whole resolved dependency tree. It&#39;s a json, and it&#39;s a big one - I don&#39;t recommend trying to parse it in your memory (or even starring at it to long) - your eyes may soon start bleeding. But you can search it for any version strings that contain <code>-rc1</code> - these are the bad dependencies that we have to get rid of.</p>

<h2 id="net-core-on-server">.Net Core on server</h2>

<p>If you want to run your app on IIS, there is a <em>&quot;windows (server hosting)&quot;</em> position on the <a href="https://www.microsoft.com/net/download#winserverhost">.Net Core download</a> page. This will install .Net Core and the <strong>ASP.NET Core Module for IIS</strong>, which is a <a href="https://github.com/aspnet/Announcements/issues/164">replacement for the old <code>HttpPaltformHandler</code></a> (and which I&#39;m waiting to see being <a href="https://github.com/aspnet/IISIntegration/issues/105#issuecomment-205082952">open sourced</a>).</p>

<h3 id="publishing-to-iis">Publishing to IIS</h3>

<p>There is a new tool: , which adds <code>dotnet-publish-iis</code> command. As promising as it may seem, it doesn&#39;t handle IIS deployment (i.e. with MSDeploy). What it does is just add or modify <em>web.config</em> file to inclide <em>Asp.Net Core Module for IIS</em> with the right parameters. The deployment part you have to handle yourself, but Visual Studio will make it easy for you.</p>

<h3 id="server-mode-garbage-collection">Server-mode Garbage Collection</h3>

<p>When targeting full .Net Framework, if you want <a href="https://msdn.microsoft.com/en-us/library/cc165011(v=office.11).aspx">server garbage collection</a>, you have to <a href="https://docs.asp.net/en/latest/migration/rc1-to-rtm.html#server-garbage-collection-gc">enable it</a> in  <em>project.json</em> or <em>app.config</em>:</p>
<div class="highlight"><pre><code class="language-" data-lang=""><span class="p">{</span><span class="w">
    </span><span class="nt">"runtimeOptions"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
        </span><span class="nt">"configProperties"</span><span class="p">:</span><span class="w"> </span><span class="p">{</span><span class="w">
            </span><span class="nt">"System.GC.Server"</span><span class="p">:</span><span class="w"> </span><span class="kc">true</span><span class="w">
        </span><span class="p">}</span><span class="w">
    </span><span class="p">}</span><span class="w">
</span><span class="p">}</span><span class="w">
</span></code></pre></div>
<p>There are also some more <a href="https://github.com/dotnet/cli/blob/rel/1.0.0/Documentation/specs/runtime-configuration-file.md">settings that you can put in <code>runtimeOptions</code></a>.</p>

	  ]]></description>
	</item>

	<item>
	  <title>.Net Core 1.0 Released!</title>
	  <link>//net-core-1-0-released</link>
	  <author>qbik</author>
	  <pubDate>2016-06-28T00:00:00+02:00</pubDate>
	  <guid>//net-core-1-0-released</guid>
	  <description><![CDATA[
	     <p>This came as a little surprise for me, especially that rc2 was released not so long ago, but here it is! <a href="http://www.hanselman.com/blog/NETCore10IsNowReleased.aspx">.Net Core 1.0 is finally released</a>. </p>

<p>I suppose now I should migrate my rc1 projects to final version, since it&#39;s stable now...</p>

<h1 id="installation">Installation</h1>

<p>If you don&#39;t mind installers, just go to <a href="http://dot.net">dot.net</a> and download the <a href="https://go.microsoft.com/fwlink/?LinkID=809122">.Net Core SDK Windows Installer</a>.</p>

<p>Otherwise, if you&#39;re a command-line freak, use the <code>dotnet-install.ps1</code> script (from PowerShell commandline):</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; wget https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0/scripts/obtain/dotnet-install.ps1 | iex
</code></pre></div>
<p>You don&#39;t even need elevated access - by default <code>dotnet</code> will install in <code>%LOCALAPPDATA%\Microsoft\dotnet</code>. The install script also takes optional arguments, such as the required version of dotnet SDK, install location, and so on. If you want to fiddle with these options, just save it locally:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; wget https://raw.githubusercontent.com/dotnet/cli/rel/1.0.0/scripts/obtain/dotnet-install.ps1 -outfile dotnet-install.ps1
&gt;  get-help .\dotnet-install.ps1 -Detailed
</code></pre></div>
<p>Let&#39;s verify <code>dotnet</code> installation:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; dotnet --info
.NET Command Line Tools (1.0.0-preview2-003121)

Product Information:
Version:            1.0.0-preview2-003121
Commit SHA-1 hash:  1e9d529bc5

Runtime Environment:
OS Name:     Windows
OS Version:  10.0.10586
OS Platform: Windows
RID:         win10-x64
</code></pre></div>
<p>Cool, now we can get to work.</p>

<h3 id="net-core-vs-net-core-sdk">.Net Core vs .Net Core SDK</h3>

<p>If you head to <a href="https://www.microsoft.com/net/download">Downloads</a> on dot.net site, you will notice there are two separate components, that are versioned separately:</p>

<ul>
<li>.NET Core = Run apps with .NET Core runtime</li>
<li>.NET Core SDK = Develop apps with .NET Core and the SDK+CLI (Software Development Kit/Command Line Interface) tools</li>
</ul>

<p>This may seem confusing, but think of it this way: <code>.Net Core</code> is like another version of .Net Framework. You need it in order to run applications that target <code>.Net Core</code> (like on the server). <code>.Net Core SDK</code> contains <code>.Net Core</code> plus additional (CLI tooling)[<a href="https://github.com/dotnet/cli">https://github.com/dotnet/cli</a>] - so you can actually develop and compile apps (like on your dev machine). </p>

<p>The <code>dotnet</code> command is still available after <code>.Net Core</code> installation (without the SDK), but if you run it:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; dotnet restore
Did you mean to run dotnet SDK commands? Please install dotnet SDK from:
 http://go.microsoft.com/fwlink/?LinkID=798306&amp;clcid=0x409

&gt; dotnet
Microsoft .NET Core Shared Framework Host

Version  : 1.0.1
Build    : cee57bf6c981237d80aa1631cfe83cb9ba329f12

Usage: dotnet [common-options] [[options] path-to-application]

Common Options:
--help                           Display .NET Core Shared Framework Host help.
--version                        Display .NET Core Shared Framework Host version.

Options:
--fx-version &lt;version&gt;           Version of the installed Shared Framework to use to run the application.
--additionalprobingpath &lt;path&gt;   Path containing probing policy and assemblies to probe for.

Path to Application:
The path to a .NET Core managed application, dll or exe file to execute.

If you are debugging the Shared Framework Host, set 'COREHOST_TRACE' to '1' in your environment.

To get started on developing applications for .NET Core, install .NET SDK from:
http://go.microsoft.com/fwlink/?LinkID=798306&amp;clcid=0x409
</code></pre></div>
<h3 id="what-39-s-in-the-box">What&#39;s in the box?</h3>

<p>The <code>dotnet</code> directory layout looks like this:</p>
<div class="highlight"><pre><code class="language-" data-lang="">dotnet
 \- shared/
     \- Microsoft.NETCore.App/
         \- 1.0.0/
             \- *.dll files
             \- corehost.exe
             \- dotnet.exe
             \- .version
             \- Microsoft.NETCore.App.deps.json
 \- sdk/
     \- 1.0.0-preview2-003121
         \- *.dll files
         \- .version
         \- *.deps.json files
         \- hostfxr.dll
         \- corehost.exe
         \- hostpolicy.dll
         \- runtimes/
             \- unix/
             \- win7/
             \- win/
             \- win-x64/
             \- win-x86/
             \- win8-arm/
 \- host
     \- fxr
         \- 1.0.1
             \- hostfxr.dll
 \- dotnet.exe
</code></pre></div>
<p>Something to note:</p>

<ul>
<li>Each directory in <code>runtimes</code> contains only a few runtime-specific dlls.</li>
<li><code>hostfxr.dll</code> - wonder what&#39;s this for...</li>
</ul>

<h1 id="getting-started">Getting started</h1>

<p><code>dotnet</code> command is announced to be the one which you will ever need to operate in .Net Core space. That is, including creating a new project:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; dotnet new

Welcome to .NET Core!
---------------------
Learn more about .NET Core @ https://aka.ms/dotnet-docs. Use dotnet --help to see available commands or go to https://aka.ms/dotnet-cli-docs.
Telemetry
--------------
The .NET Core tools collect usage data in order to improve your experience. The data is anonymous and does not include commandline arguments. The data is collected by Microsoft and shared with the community.
You can opt out of telemetry by setting a DOTNET_CLI_TELEMETRY_OPTOUT environment variable to 1 using your favorite shell.
You can read more about .NET Core tools telemetry @ https://aka.ms/dotnet-cli-telemetry.
Configuring...
-------------------
A command is running to initially populate your local package cache, to improve restore speed and enable offline access. This command will take up to a minute to complete and will only happen once.
Decompressing 100% 5206 ms
Expanding 100% 104448 ms
Created new C# project in C:\src\dotnet\test.
</code></pre></div>
<p>That gives us a simple &quot;Hello world&quot; program and a <code>project.json</code> file. Just type <code>dotnet run</code> and...</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; dotnet run
The current project is not valid because of the following errors:
C:\src\dotnet\test\project.lock.json(1,0): error NU1009: The expected lock file doesn't exist. Please run "dotnet restore" to generate a new lock file.
</code></pre></div>
<p>Ok, sure, <code>dotnet restore</code>:</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; dotnet restore    
log  : Restoring packages for C:\src\dotnet\test\project.json...
log  : Writing lock file to disk. Path: C:\src\dotnet\test\project.lock.json
log  : C:\src\dotnet\test\project.json
log  : Restore completed in 2118ms.
</code></pre></div>
<p>Fine, <code>project.lock.json</code> is created and up to date.</p>
<div class="highlight"><pre><code class="language-" data-lang="">&gt; dotnet run
Project test (.NETCoreApp,Version=v1.0) will be compiled because expected outputs are missing
Compiling test for .NETCoreApp,Version=v1.0

Compilation succeeded.
    0 Warning(s)
    0 Error(s)

Time elapsed 00:00:03.1092630


Hello World!
</code></pre></div>
<p>Great! Now you can checkout all the resources at <a href="https://www.microsoft.com/net">https://www.microsoft.com/net</a> and start hacking. And I&#39;m gonna start migrating my RC1 projects to <code>.Net Core 1.0</code>...</p>

	  ]]></description>
	</item>


</channel>
</rss>
