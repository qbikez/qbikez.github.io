<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://heavymetaldev.com</link>
   <description>Developer stories from the trenches.</description>
   <language>en-uk</language>
   <managingEditor> qbik</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Mercurial repository conversion</title>
	  <link>//hg-repo-conversion</link>
	  <author>qbik</author>
	  <pubDate>2017-01-22T00:00:00+01:00</pubDate>
	  <guid>//hg-repo-conversion</guid>
	  <description><![CDATA[
	     <p>Have you ever needed to split a repository, or take out just a few directories, retaining their history? 
Or maybe your repo contains too many (possibly unrelated) projects? 
Or has grown so big that you can’t even clone it?</p>

<p>Mercurial’s <a href="https://www.mercurial-scm.org/wiki/ConvertExtension#Usage">convert extension</a> is here to help. It’s a multitool that can convert from various other VCS, like git, SVN, ect, and from HG. The last one is what we need.</p>

<h1 id="why">Why</h1>

<p>The benefits of splitting large repositories are:</p>

<ul>
  <li>teams can work independently and move at different speeds</li>
  <li>you can give someone (an outsourcer perhaps) access to only some parts of your codebase</li>
  <li>smaller repos are easier to manage</li>
  <li>some CI systems (like appveyor or travis) use a single configuration file per repo - stuffing multiple projects into these files will just complicate the build and obfuscate results</li>
</ul>

<h1 id="powering-up-convert-with-some-scripts">Powering up <code class="highlighter-rouge">convert</code> with some scripts</h1>

<p><code class="highlighter-rouge">convert</code> is a rather low-level tool and needs a few configuration files and commandline options to work the way you want. And let’s face it - you won’t be right for the first time and will need to do some tweaking.</p>

<p>That’s why I created a few powershell scripts and template files to help us with conversion.</p>

<h1 id="configuration">Configuration</h1>

<ol>
  <li>
    <p>Enable the <code class="highlighter-rouge">convert</code> extension in <a href="http://hgtip.com/tips/beginner/2009-09-30-configuring-mercurial/">mercurial.ini</a>:</p>

    <div class="highlighter-rouge"><pre class="highlight"><code> [extensions]
 convert =
</code></pre>
    </div>
  </li>
  <li>
    <p>Clone or download <a href="https://gist.github.com/qbikez/e900456032833fb2baaaee87e19a8ccd">this gist</a>. I recommend creating a separate directory (and possibly version controling it) for every conversion you make  and copying these files there.</p>
  </li>
  <li>
    <p>Create two files: <code class="highlighter-rouge">branchmap.txt</code> and <code class="highlighter-rouge">filemap.txt</code> (you may copy them from <code class="highlighter-rouge">branchmap.sample.txt</code> and <code class="highlighter-rouge">filemap.sample.txt</code>). These are the config files we will use to tell mercurial which directories to inlcude in converted repo and how to treat branches. As you will see, these files support an extended syntax (in comparison to what <code class="highlighter-rouge">convert</code> understands). They are then used to generate <em>real</em> branchmap/filemap files for mercurial.</p>
  </li>
</ol>

<p>Now, we need to fill these config files.</p>

<h2 id="sample-repository">Sample repository</h2>

<p>Let’s use the repo at https://bitbucket.org/heavymetaldev/convert-me as an example. The structure looks like this:</p>

<p><code class="highlighter-rouge">
|-- convert-me
    |-- .hgignore
    |-- top-secret.txt
    |-- sln
    |   |-- MyProject.Core
    |   |   |-- MyProject.Core.sln
    |   |-- MyProject.Desktop
    |       |-- MyProject.Desktop.sln
    |-- src
        |-- MyProject.Core.Api
        |   |-- MyProject.Core.Api.csproj
        |-- MyProject.Core.Model
        |   |-- MyProject.Core.Model.csproj
        |-- MyProject.Core.Utils
        |   |-- MyProject.Core.Utils.csproj
        |-- MyProject.Desktop.WinForms
            |-- MyProject.Desktop.WinForms.csproj
</code></p>

<blockquote>
  <p>This repository contains c# projets, but scripts and methods described here can be as well applied to any other mercurial repo.</p>
</blockquote>

<p>There are two solution files <code class="highlighter-rouge">MyProject.Core</code> and <code class="highlighter-rouge">MyProject.Desktop</code>. I want to move these solutions to two separate repositories (<code class="highlighter-rouge">repo-a</code> and <code class="highlighter-rouge">repo-b</code>), along with the projects they refer to). Additionally, I want to remove the toplevel file <code class="highlighter-rouge">top-secret.txt</code>, as it contains confidential data.</p>

<p><code class="highlighter-rouge">Repo A</code> should look like this:</p>

<p><code class="highlighter-rouge">
|-- Repo-A
    |-- .hgignore
    |-- sln
    |   |-- MyProject.Core
    |   |   |-- MyProject.Core.sln
    |-- src
        |-- MyProject.Core.Api
        |   |-- MyProject.Core.Api.csproj
        |-- MyProject.Core.Model
        |   |-- MyProject.Core.Model.csproj
        |-- MyProject.Core.Utils
        |   |-- MyProject.Core.Utils.csproj
</code></p>

<p><code class="highlighter-rouge">Repo B</code> should contain remaining projects and files:</p>

<p><code class="highlighter-rouge">
|-- Repo-B
    |-- .hgignore
    |-- sln
    |   |-- MyProject.Desktop
    |       |-- MyProject.Desktop.sln
    |-- src
        |-- MyProject.Desktop.WinForms
            |-- MyProject.Desktop.WinForms.csproj
</code></p>

<h2 id="filemap-on-steroids">Filemap on steroids</h2>

<p>Let’s start with filemap. It defines, which files or directories should be included (or excluded) in the new repository. You may also use it to rename files.</p>

<p>The extended filemap format supports lines in the following forms:</p>

<p>```
# this is th basic mercurial stuff:
include path/to/file
exclude path/to/file
rename from/file to/file</p>

<h1 id="this-is-extended-format">this is extended format:</h1>
<p>include r:regex/to/.<em>/include
include r:!regex/to/.</em>/include/if/not/match
exclude r:regex/to/.<em>/exclude
exclude r:!regex/to/.</em>/exclude/if/not/match
include sln:path/to/something.sln
```</p>

<ul>
  <li><code class="highlighter-rouge">r:</code> indicates that this entry is a regex. <code class="highlighter-rouge">r:!</code> is a negated regex (i.e.: everything that does not match this pattern).</li>
  <li><code class="highlighter-rouge">sln:</code> is specifically for C# solution files. This will parse the <code class="highlighter-rouge">.sln</code> file and generate include entries for every <code class="highlighter-rouge">csproj</code> it contains. In other words, this will include the whole solution.</li>
</ul>

<p>Let’s look at our sample repo. For converting to <code class="highlighter-rouge">repo-a</code>, we can use the following <code class="highlighter-rouge">filemap.txt</code> content:</p>

<p><code class="highlighter-rouge">
include .hgignore
include r:.*/MyProject\.Core(\..*){0,1}/
exclude top-secret.txt
</code></p>

<blockquote>
  <p>By default, everything that’s not included gets excluded, so the last line isn’t really necessary, but we’ll leave it there for verbosity.</p>
</blockquote>

<p>This will generate the following <code class="highlighter-rouge">filemap.gen.txt</code> for mercurial to use:</p>

<p><code class="highlighter-rouge">
include ".hgignore"
include "sln/MyProject.Core"
include "src/MyProject.Core.Api"
include "src/MyProject.Core.Model"
include "src/MyProject.Core.Utils"
include "src/MyProject.Core.Api/App_Data"
include "src/MyProject.Core.Api/App_Start"
include "src/MyProject.Core.Api/Controllers"
include "src/MyProject.Core.Api/Models"
include "src/MyProject.Core.Api/Properties"
include "src/MyProject.Core.Api/Service References"
include "src/MyProject.Core.Api/Service References/Application Insights"
include "src/MyProject.Core.Model/Properties"
include "src/MyProject.Core.Utils/Properties"
remove top-secret.txt
</code></p>

<blockquote>
  <p>Some of these entries are in fact obsolete. Once we include a directory, there is no need to include all it’s subdirectories. But since the file is autogenerated, this is not a worry.</p>
</blockquote>

<p>For <code class="highlighter-rouge">repo-b</code>, I will go minimalist and use <code class="highlighter-rouge">sln:</code> prefix:</p>

<p><code class="highlighter-rouge">
include .hgignore
include sln:sln/MyProject.Desktop/MyProject.Desktop.sln
exclude top-secret.txt
</code></p>

<h1 id="conversion-process">Conversion Process</h1>

<p>We will use <code class="highlighter-rouge">hg-convert.ps1</code> script to do the conversion. Sample usage:</p>

<div class="highlighter-rouge"><pre class="highlight"><code>PS&gt; .\hg-convert path/to/source/convert-me path/to/target/repo-a -startrev 123
</code></pre>
</div>

<p>This script takes care of configuring and calling <code class="highlighter-rouge">hg convert</code>. It will:</p>

<ol>
  <li>Take <code class="highlighter-rouge">filemap.txt</code> (if it exists), generate <code class="highlighter-rouge">filemap.gen.txt</code> and pass it to <code class="highlighter-rouge">convert</code></li>
  <li>Take <code class="highlighter-rouge">branchmap.txt</code> (if it exists), generate <code class="highlighter-rouge">branchmap.gen.txt</code> and pass it to <code class="highlighter-rouge">convert</code> (more of branchmap later)</li>
  <li>Check if the target repository already exists (use <code class="highlighter-rouge">-force</code> to force overwrite)</li>
  <li>Convert the repository at <code class="highlighter-rouge">path/to/source/convert-me</code>, starting at revision <code class="highlighter-rouge">123</code> and save it at <code class="highlighter-rouge">path/to/target/repo-a</code></li>
</ol>

<p><code class="highlighter-rouge">startrev</code> specifies the revision at which the conversion process should start (and convert it and all of its descendants). If you specify <code class="highlighter-rouge">0</code> (default), it will convert whole repository (which may take a considerable time if the repo is big). For testing purpose, I recommend starting with the latest revision. This way, only this one revision will be converted and you can check, if you have included everything you need in the filemap. My process is as follows (this should will save you some time and frustration):</p>

<ol>
  <li>Setup filemap</li>
  <li>
    <p>Convert only the newest revision, using <code class="highlighter-rouge">startrev</code> parameter, i.e:</p>

    <div class="highlighter-rouge"><pre class="highlight"><code> PS&gt; .\hg-convert ../convert-me ../repo-a -startrev 55
</code></pre>
    </div>
  </li>
  <li>Check the converted repository - try to build everything</li>
  <li>Copy missing files from old repo to the new repo and add them to filemap, until the new repo builds properly</li>
  <li>Repeat from 2. until I get it rigth</li>
  <li>
    <p>Start full conversion from revision 0</p>

    <div class="highlighter-rouge"><pre class="highlight"><code> PS&gt; .\hg-convert ../convert-me ../repo-a -startrev 0
</code></pre>
    </div>
  </li>
</ol>

<p>If everything goes rigth, we got now two separate repositories, <code class="highlighter-rouge">repo-a</code> and <code class="highlighter-rouge">repo-b</code>. Notify other developers of the change, so no one tries to push to the old repo (renaming or removing it might also be a good way to prevent this).</p>

<p>But wait, there are also some other scenarios whe should cover.</p>

<h3 id="automated-branchmap">Automated branchmap</h3>

<p>Branchmap defines the mapping between branch names in old repo and new repo. <code class="highlighter-rouge">branchmap.txt</code> support the following line format:</p>

<p>```
# this is th basic mercurial stuff:
original_branch_name new_branch_name</p>

<h1 id="this-is-extended-format-1">this is extended format:</h1>
<p>r:release/.* release
r:!release default
* default
```</p>

<p>Similar to filemap, <code class="highlighter-rouge">r:</code> and <code class="highlighter-rouge">r:!</code> denotes regex to match/notmatch. A single <code class="highlighter-rouge">*</code> means - you guessed it - “everything”.</p>

<p>For example, my <code class="highlighter-rouge">branchmap.txt</code> could look like this:</p>

<p><code class="highlighter-rouge">
* default
r:release/.* release
dev dev
</code></p>

<p>All branches that match <code class="highlighter-rouge">release/*</code> pattern will be renamed to <code class="highlighter-rouge">release</code>. Branch <code class="highlighter-rouge">dev</code> will remain <code class="highlighter-rouge">dev</code>. Everything else will be renamed to <code class="highlighter-rouge">default</code>.</p>

<blockquote>
  <p>Note that the order matters here. If a branch matches multiple patterns, the last one will always win. So, start with the most generic one. If you write <code class="highlighter-rouge">* default</code> at the end of file, everything before it will be  effectively ignored. You may want to inspect <code class="highlighter-rouge">branchmap.gen.txt</code> to see, if everything looks like you wanted.</p>
</blockquote>

<h3 id="appending-revisions-to-existing-repo">Appending revisions to existing repo</h3>

<p>The last thing I want to mention is appending parts of history onto one another. Let’s go back to our <code class="highlighter-rouge">convert-me</code> repo. The news of switching to new repositories hasn’t reach one developer, who just pushed some critical changes in <code class="highlighter-rouge">MyProject.Core.Model</code> and <code class="highlighter-rouge">MyProject.Desktop.WinForms</code> in <code class="highlighter-rouge">convert-me</code> repo (instead of <code class="highlighter-rouge">repo-a</code> and <code class="highlighter-rouge">repo-b</code> respectively) - lets call them “offending changes”. How to transfer these changes to new repos without breaking anything? Run <code class="highlighter-rouge">convert</code> again? But this will recreate these repositories, effectively breaking them for everyone who has them checked out.</p>

<p><code class="highlighter-rouge">convert</code> gives us a way to append parts of converted history into an existing repo. And this is exactly what we need in this case. We will:</p>

<ol>
  <li>specify offending changes (starting from the first revision that hasn’t been converted before)</li>
  <li>Check offending changes parent and find corresponding commits in <code class="highlighter-rouge">repo-a</code> and <code class="highlighter-rouge">repo-b</code></li>
  <li>Convert offending changes and append them onto these corresponding parent commits. We will use the same filemaps and branchmaps to filter only required files.</li>
</ol>

<p>Now, that’s it. Hope you find this helpful and if you have any problems with the scripts - please drop me a line!</p>

<h1 id="resources">Resources</h1>

<ul>
  <li>https://www.mercurial-scm.org/wiki/ConvertExtension</li>
  <li>http://hgtip.com/tips/advanced/2009-11-16-using-convert-to-decompose-your-repository/</li>
  <li>https://gist.github.com/qbikez/e900456032833fb2baaaee87e19a8ccd</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Configuring mercurial keyring</title>
	  <link>//configuring-mercurial-keyring</link>
	  <author>qbik</author>
	  <pubDate>2017-01-09T00:00:00+01:00</pubDate>
	  <guid>//configuring-mercurial-keyring</guid>
	  <description><![CDATA[
	     <p>If you don’t want to type your username and password everytime you do a pull or push to mercurial, you have to store your credentials somewhere. On windows, the commandline <code class="highlighter-rouge">hg</code> does not store credentials (you have to enter them every time). If you configure credentials in TortoiseHG, the username and password will be stored in plain-text, in <em>mercurial.ini</em> file. This is not the most secure way to do it, and mercurial will even warn you about that.</p>

<h1 id="keyring">Keyring</h1>

<p><a href="https://pypi.python.org/pypi/keyring">Keyring</a> is a Python module that uses native OS credentials database to store passwords. On Windows, it uses <a href="http://www.techrepublic.com/blog/windows-and-office/manage-network-logon-credentials-in-microsoft-windows/">Windows Credentials Manager</a> <a href="https://technet.microsoft.com/en-us/library/cc754243(v=ws.11).aspx">cmdkey.exe</a>. For mercurial, there is <a href="https://bitbucket.org/Mekk/mercurial_keyring/">mercurial_keyring</a> extension that uses keyring as credentials store.</p>

<h1 id="installing-keyring-on-windows">Installing keyring on Windows</h1>

<p>The <a href="https://bitbucket.org/Mekk/mercurial_keyring#rst-header-id3">guide for <code class="highlighter-rouge">mercurial_keyring</code></a> says that installation “in some cases (Windows…) requires more care”. I will focus here on Windows installation, specifically the case when you use TortoiseHG distribution of mercurial.
What we will do is install <code class="highlighter-rouge">python2</code> from chocolatey, use <code class="highlighter-rouge">pip</code> to install all required python modules, then configure path to these modules in <em>mercurial.ini</em>.</p>

<ol>
  <li>
    <p>If you don’t have it already, install <code class="highlighter-rouge">python2</code>:</p>

    <div class="highlighter-rouge"><pre class="highlight"><code> &gt; choco install -y python2
 &gt; refreshenv
</code></pre>
    </div>

    <blockquote>
      <p>chocolatey package python2 installs to <em>c:/Python27</em> by default</p>
    </blockquote>
  </li>
  <li>
    <p>install <code class="highlighter-rouge">mercurial_keyring</code></p>

    <div class="highlighter-rouge"><pre class="highlight"><code> &gt; pip install --user mercurial_keyring
</code></pre>
    </div>

    <blockquote>
      <p>pip will handle installation of all dependencies, including <code class="highlighter-rouge">keyring</code>, <a href="https://bitbucket.org/Mekk/mercurial-extension_utils/#rst-header-id3"><code class="highlighter-rouge">mercurial_extension_utils</code></a>, etc.</p>
    </blockquote>
  </li>
  <li>
    <p>Configure exension in <em>mercurial.ini</em>:</p>

    <p><code class="highlighter-rouge">
 [extensions]
 mercurial_keyring = C:/Python27/Lib/site-packages/mercurial_keyring.py
</code></p>
  </li>
</ol>

<h1 id="verify-it">Verify it</h1>

<p>Let’s try it out:</p>

<p><code class="highlighter-rouge">
&gt; hg clone https://bitbucket.org/heavymetaldev/top-secret tmp
keyring: username not specified in hgrc (or in url). Password will not be saved.
http authorization required
realm: Bitbucket.org HTTP
url: https://bitbucket.org/heavymetaldev/top-secret
user:
</code></p>

<p>Note that <code class="highlighter-rouge">keyring</code> apparently is working, but it says it will not save password. To configure username, either add it to repo url (like:  https://qbik@bitbucket.org/heavymetaldev/top-secret) or configure in <code class="highlighter-rouge">mercurial.ini</code>:</p>

<p>````
[auth]
bitbucket.org.prefix = bitbucket.org
bitbucket.org.username = qbik
```</p>

<p>TortoiseHG does exactly that when you configure credentials there (with <code class="highlighter-rouge">mercurial_keyring</code> enabled).</p>

<p>Now, you can safely store your credentials, not worrying about it leaking somewhere.</p>

<h1 id="use-ssh">Use SSH</h1>

<p>If you use a hostin service that provides SSH access (like bitbucket), you may also want to <a href="/appveyor-private-subrepos#cloning-hg-over-ssh-from-bitbucket">configure SSH private key</a> instead of storing usernamee and password.</p>

	  ]]></description>
	</item>

	<item>
	  <title>Build private mercurial subrepos on Appveyor</title>
	  <link>//appveyor-private-subrepos</link>
	  <author>qbik</author>
	  <pubDate>2017-01-08T00:00:00+01:00</pubDate>
	  <guid>//appveyor-private-subrepos</guid>
	  <description><![CDATA[
	     <p>Appveyor is a great CI service for Windows apps. It’s simple, free (for open-source) and easy to setup. Sometimes even public, open source projects may want to have private subrepositories. Appveyor supports such a setup and in this post I will show you, how to configure private subrepo for mercruial.</p>

<h2 id="the-git-way">The Git way</h2>

<p>There already is a good guide for <a href="https://www.appveyor.com/docs/how-to/private-git-sub-modules">private git subrepos</a>. Let’s try and do the same for mercurial. The git guide references GitHub as hosting platform, and for mercurial I will use BitBucket, wich has similar est of features but support both git and mercurial (and has unlimited number of <strong>free private repositories</strong>, yay!).</p>

<h2 id="the-hg-way">The Hg way</h2>

<p>In case of mercurial, the solution is similar to git, but configuriaton may not be as straightforward.</p>

<p>We will split the process in three steps:
1. Configure ssh clone on local machine
2. Do the same in AppVeyor with an arbitrary repository
3. Configure private hg subrepo and check it out in AppVeyor</p>

<h2 id="cloning-hg-over-ssh-from-bitbucket">Cloning HG over SSH (from Bitbucket)</h2>

<p>Let’s start with a simple thing: clone a repository over ssh. I’ll use BitBucket for mercurial hosting and Appveyor for cloning and building.
BitBucket has a guide on <a href="https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Mercurial">setting up ssh</a>. Unfortunatelly, the Windows guide uses Putty and Pageant for managing SSH keys, which requires a GUI and isn’t commandline-friendly. We cannot use it from Appveyor scripts (plink can also be run in <a href="https://www.mercurial-scm.org/wiki/AccessingSshRepositoriesFromWindows">batch mode</a>, but I will stick to plain ssh).</p>

<p>Lucky for me, a <a href="https://confluence.atlassian.com/display/BITBUCKET/Set+up+SSH+for+Git">similar guide for git</a> doesn’t include putty at all. We can use the same steps to configure mercurials ssh.</p>

<ol>
  <li>
    <p>Install Git for Windows:</p>

    <div class="highlighter-rouge"><pre class="highlight"><code> &gt; choco install -y git
</code></pre>
    </div>
  </li>
  <li>Make sure you have <code class="highlighter-rouge">ssh.exe</code> on PATH (it will most probably be in ‘c:\Program Files\Git\usr\bin’)</li>
  <li>
    <p>List the content of <code class="highlighter-rouge">$env:USERPROFILE/.ssh</code> directory</p>

    <div class="highlighter-rouge"><pre class="highlight"><code> &gt; ls $env:USERPROFILE/.ssh
</code></pre>
    </div>

    <p>If you have a default identity already, you’ll some <em>id_*</em> files.</p>
  </li>
  <li>
    <p>Generate a ssh key (or use an existing one)</p>

    <div class="highlighter-rouge"><pre class="highlight"><code> &gt; ssh-keygen -t rsa -b 4096 -C "your_email@example.com"
</code></pre>
    </div>
  </li>
  <li>
    <p>Set up SSH key on Bitbucket:</p>

    <ol>
      <li>Open a browser and log in to Bitbucket.</li>
      <li>Choose <em>avatar</em> &gt; <strong>Bitbucket settings</strong> from the menu bar, then click <strong>SSH Settings</strong> on the left.</li>
      <li>Add a new key. This is a public key, which value is the content of <code class="highlighter-rouge">$env:USERPROFILE/.ssh/id_rsa.pub</code> (will probably start with “<em>ssh-rsa</em> …”)</li>
    </ol>
  </li>
  <li>
    <p>create a private HG repo and clone it over SSH:</p>

    <div class="highlighter-rouge"><pre class="highlight"><code> &gt; hg clone ssh://hg@bitbucket.org/heavymetaldev/top-secret
</code></pre>
    </div>

    <blockquote>
      <p>If you see <code class="highlighter-rouge">remote: Permission denied (publickey).</code>, then there is something wrong with SSH key, i.e.:
 1. Mercurial doesn’t use the private key from <code class="highlighter-rouge">$env:USERPROFILE/.ssh/id_rsa</code> 
 2. Public SSH key is not properly configured in BitBucket</p>

      <p>You can add <code class="highlighter-rouge">--debug</code> switch to see the commands that are invoked undearneath. You will see that mercurial calls:</p>

      <p><code class="highlighter-rouge">ssh hg@bitbucket.org "hg -R heavymetaldev/top-secret serve --stdio"</code></p>

      <p>You can use this command to further debug ssh issues.</p>
    </blockquote>
  </li>
</ol>

<h2 id="private-hg-subprepos-on-appveyor">Private HG subprepos on Appveyor</h2>

<p>Knowing that SSH clone works locally, we can configure AppVeyor to do the same.</p>

<p>These are general steps we need to take:
1. Generate a new SSH key pair for AppVeyor access to Bitbucket repo
2. Save private key in AppVeyor’s encrypted environment variable</p>

<p>In the build script (during <code class="highlighter-rouge">install</code> phase), we need to:
1. Extract private key from environment variable to file <code class="highlighter-rouge">$env:USERPROFILE/.ssh/id_rsa</code>
2. Add Bitbucket’s SSL certificate fingerprint to <code class="highlighter-rouge">$env:USERPROFILE/.ssh/known_hosts</code></p>

<p>First, generate a new SSH key that will be used by AppVeyor and add it to Bitbucket (like in the previous paragraph).</p>

<div class="highlighter-rouge"><pre class="highlight"><code>&gt; ssh-keygen -t rsa -b 4096 -C "your_email@example.com" -f "id_rsa_appveyor_top-secret"
</code></pre>
</div>

<p>Instead of configuring it at account level, add it as <a href="https://confluence.atlassian.com/display/BITBUCKET/Use+access+keys">read-only access key</a> to specific repo that you will be cloning.</p>

<p>Now, we need to configure the SSH key in AppVeyor. The process is very similar to the <a href="https://www.appveyor.com/docs/how-to/private-git-sub-modules/#appveyoryml">git way</a>.</p>

<blockquote>
  <p>Open the generated private key and copy base-64 body of the key <em>between</em> <code class="highlighter-rouge">-----BEGIN RSA PRIVATE KEY-----</code> and <code class="highlighter-rouge">-----END RSA PRIVATE KEY-----</code> into clipboard (without these BEGIN / END lines).</p>

  <p>Copy the contents of private key to clipboard as shown above and open Encrypt data tool in AppVeyor. Encrypt the value of clipboard using that page.</p>
</blockquote>

<p>Paste the encrypted value into the build script (or configure it in web UI). It will look something like this:</p>

<p><code class="highlighter-rouge">appveyor.yml</code>:</p>

<p><code class="highlighter-rouge">
environment:
  priv_key:
    secure: &lt;encryped-value&gt;
  subrepo_owner: heavymetaldev
  subrepo_name: top-secret
  subrepo_branch: default
install:
  - ps: .\clone-subrepo.ps1
</code></p>

<p>The additional environment variables (<code class="highlighter-rouge">subrepo_*</code>) are used to determine repository url and branch name to checkout.
<code class="highlighter-rouge">clone-subrepo.ps1</code> is where the real job is done:</p>

<p>```
# get repo url and branch from env variables 
$owner = $env:subrepo_owner
$repoName = $env:subrepo_name
$repo = “$owner/$repoName”
$branch = $env:subrepo_branch</p>

<p>if ($branch -eq $null) {
	$branch = “default”
    write-host “will use default branch ‘$branch’”
} else {
    write-host “will use configured branch ‘$branch’”
}</p>

<p>write-host “testing if ssh is available”
get-command “ssh.exe” -ErrorAction Stop</p>

<h1 id="use-sshexe-available-on-path">use ssh.exe available on PATH</h1>
<p>‘[ui]’ | out-file  “$env:USERPROFILE/mercurial.ini” -Append -Encoding utf8
‘ssh=ssh.exe’ | out-file “$env:USERPROFILE/mercurial.ini” -Append -Encoding utf8</p>

<h1 id="add-bitbucket-host-fingerprint-to-knownhosts">add Bitbucket host fingerprint to known_hosts</h1>
<p>$bbhostkey = @”
bitbucket.org,104.192.143.3 ssh-rsa AAAAB3NzaC1yc2EAAAABIwAAAQEAubiN81eDcafrgMeLzaFPsw2kNvEcqTKl/VqLat/MaB33pZy0y3rJZtnqwR2qOOvbwKZYKiEO1O6VqNEBxKvJJelCq0dTXWT5pbO2gDXC6h6QDXCaHo6pOHGPUy+YBaGQRGuSusMEASYiWunYN0vCAI8QaXnWMXNMdFP3jHAJH0eDsoiGnLPBlBp4TNm6rYI74nMzgz3B9IikW4WVK+dc8KZJZWYjAuORU3jc1c/NPskD2ASinf8v3xnfXeukU0sJ5N6m5E8VLjObPEO+mN2t/FZTMZLiFqPWc/ALSqnMnnhwrNi2rbfg/rd/IpL8Le3pSBne8+seeFVBoGqzHM9yXw==
“@</p>

<p>write-host “adding bitbucket to known_hosts”
$bbhostkey | out-file “$env:USERPROFILE/.ssh/known_hosts” -Append -Encoding utf8</p>

<h1 id="add-private-key-to-idrsa">add private key to id_rsa</h1>
<p>write-host “adding private key”
$fileContent = “—–BEGIN RSA PRIVATE KEY—–<code class="highlighter-rouge">n"
$fileContent += $env:priv_key.Replace(' ', "</code>n”)
$fileContent += “<code class="highlighter-rouge">n-----END RSA PRIVATE KEY-----</code>n”
Set-Content “$env:USERPROFILE.ssh\id_rsa” $fileContent</p>

<h1 id="clone-private-repo">clone private repo</h1>
<p>write-host “cloning”
hg clone –verbose ssh://hg@bitbucket.org/$repo $repoName</p>

<h1 id="update-private-repo-to-specified-branch-get-status">update private repo to specified branch, get status</h1>
<p>try {
    pushd</p>

<div class="highlighter-rouge"><pre class="highlight"><code>cd $repoName

write-host "updating to $branch"
hg update $branch 

hg summary


$message = hg log -r . -T "{desc}"
$id = hg log -r . -T "{node}"
$ts = hg log -r . -T "{date|isodate}"
$ts = [DateTime]::Parse($ts)
$authorname = hg log -r . -T "{author|person}"
$authormail = hg log -r . -T "{author|email}"
$br = hg log -r . -T "{branch}"

write-host "id:$id branch:$br msg:$message date:$ts author:$authorname mail:$authormail" }  finally {
popd } ```
</code></pre>
</div>

<p>This is everything you need to get this working. Commit <code class="highlighter-rouge">appveyor.yml</code> and <code class="highlighter-rouge">clone-subrepo.ps1</code> to a new, public repository and add it to appveyor.</p>

<h2 id="changing-appveyor-build-info">Changing Appveyor build info</h2>

<p>You may also want to include some information about  the status of your subrepo in Appveyor’s build message. <a href="https://www.appveyor.com/docs/build-worker-api/#update-build-details">Update-AppveyorBuild</a> can update build details. Add the following code to <code class="highlighter-rouge">clone-subrepo.ps1</code>:</p>

<p><code class="highlighter-rouge">
if ($env:appveyor -ne $null) {
	Update-AppveyorBuild -message "subrepo [$br](https://bitbucket.org/$repo/commits/$id): $message" -Committed $ts -CommitterName $authorname -CommitterEmail $authorEmail 
	#-CommitId $id
} 
</code></p>

<h2 id="a-real-subrepo">A real subrepo</h2>

<p>Until now, the inner repository was not a real <a href="https://www.mercurial-scm.org/wiki/Subrepository">hg subrepo</a> - the script determined it’s location and branch. Let’s now make it a subrepo and tie the exact revision to parent repository revision.</p>

<p>Add <code class="highlighter-rouge">.hgsub</code> to your public repo (this will be the “parent”):</p>

<p>```
top-secret = top-secret</p>

<p>[subpaths]
https://bitbucket.org/([^/]<em>)/([^/]</em>)/([^/]<em>)$ = ssh://hg@bitbucket.org/\1/\3
ssh://hg@bitbucket.org/([^/]</em>)/([^/]<em>)/([^/]</em>)$ = ssh://hg@bitbucket.org/\1/\3
```</p>

<p><code class="highlighter-rouge">top-secret</code> is the name of the private repository. 
The <code class="highlighter-rouge">subpaths</code> section is needed, because by default mercurial constructs subrepo url by adding it’s name after slash, so we need to remap: <code class="highlighter-rouge">https://bitbucket.org/heavymetaldev/appveyor-wrapper/top-secret</code> to  <code class="highlighter-rouge">ssh://hg@bitbucket.org/heavymetaldev/top-secret</code>. Appveyor clones repos over https, but private subrepo needs to be accessed over ssh.</p>

<p>After commiting, do a clean update:</p>

<p><code class="highlighter-rouge">
&gt; hg update -C
</code></p>

<p>This will create <code class="highlighter-rouge">top-secret</code> directory and set it’s default url to <code class="highlighter-rouge">ssh://hg@bitbucket.com/heavymetaldev/top-secret</code>. Go to <code class="highlighter-rouge">top-secret</code> folder, update the subrepo to desired revision and commit changes in the parent repo.</p>

<p>One last thing we need to do is to move <code class="highlighter-rouge">id_rsa</code> initalization directly to <code class="highlighter-rouge">appveyor.yml</code>, to <code class="highlighter-rouge">init</code> phase. The reason for this is the chicken-egg problem we now have: <code class="highlighter-rouge">install</code> phase takes place <strong>after</strong> repo clone and update, but mercurial (unlike git) updates all subrepos on parent repo update, so it needs the ssh credentials <strong>before</strong> doing the update. Fortunatelly, appveyor is clever enough to read <code class="highlighter-rouge">appveyor.yml</code> content <strong>before</strong> cloning, so it can execute <code class="highlighter-rouge">init</code> script without the repo being checked out.</p>

<p><code class="highlighter-rouge">appveyor.yml</code> will now look like this (note that we don’t need <code class="highlighter-rouge">subrepo_*</code> ariables any more):</p>

<p><code class="highlighter-rouge">
environment:
  priv_key:
    secure: &lt;encryped-value&gt;
init: 
  - ps: $fileContent = "-----BEGIN RSA PRIVATE KEY-----`n"
  - ps: $fileContent += $env:priv_key.Replace(' ', "`n")
  - ps: $fileContent += "`n-----END RSA PRIVATE KEY-----`n"
  - ps: Set-Content c:\users\appveyor\.ssh\id_rsa $fileContent
</code></p>

<p>Finally, commit changes and push the parent repo. Appveyor should now detect a new commit and start building. Hopefully, everything will be built smoothly.</p>

<p>Hapy hacking!</p>

<h2 id="notes-and-resources">Notes and resources</h2>

<ul>
  <li>You can find sample repo at: <code class="highlighter-rouge">https://bitbucket.org/heavymetaldev/appveyor-wrapper</code></li>
  <li>The build status at https://ci.appveyor.com/project/qbikez/appveyor-wrapper.</li>
  <li>The private repo is at <code class="highlighter-rouge">https://bitbucket.org/heavymetaldev/top-secret</code>, but you won’t find it there, because, well.. it’s private :)</li>
</ul>

	  ]]></description>
	</item>


</channel>
</rss>
