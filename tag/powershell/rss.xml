<?xml version="1.0" encoding="UTF-8" ?>

<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
<channel>
   
      <title></title>
   
   <link>http://heavymetaldev.com</link>
   <description>Developer stories from the trenches.</description>
   <language>en-uk</language>
   <managingEditor> qbik</managingEditor>
   <atom:link href="rss" rel="self" type="application/rss+xml" />
   
	<item>
	  <title>Measuring PowerShell hashtables performance</title>
	  <link>//powershell-hashtables</link>
	  <author>qbik</author>
	  <pubDate>2017-03-03T00:00:00+01:00</pubDate>
	  <guid>//powershell-hashtables</guid>
	  <description><![CDATA[
	     <p>Usually, Powershell is used as a “glue” to stitch a bunch of commands and programs together. It does not need to be a performance daemon to do that (and nobody says it is). Flexibility comes with a price. 
But there are cases, where your doing seemingly trivial things, but your script just takes years to finish.</p>

<p>There is a useful cmdlet  <a href="https://technet.microsoft.com/en-us/library/ee176899.aspx"><code class="language-plaintext highlighter-rouge">Measure-Command</code></a> that measures how long a piece of code takes to run. The usage is very simple:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$timespan = Measure-Command {
    # do whatever you want to measure here
}
</code></pre></div></div>

<p>That’s nice if you know or suspect which part of code is slow. But I would like to have something that’s more like instrumentation. What I want is a list of called functions with their total run times and number of calls.</p>

<p>That’s why I created a little wrapper around <code class="language-plaintext highlighter-rouge">Measure-Command</code>, called <a href="https://gist.github.com/qbikez/f59aa687035f879f70729d3d5dc311ad"><code class="language-plaintext highlighter-rouge">Measure-function</code></a>, that’s able to easily gather measurements of multiple functions. So now, if I have a function that I want to measure:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  function Get-Something {
    # i'm doing some heavy loading here
    return $something
  }
</code></pre></div></div>

<p>I just wrap the body with <code class="language-plaintext highlighter-rouge">Measure-Function</code> like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>  function Get-Something {
    Measure-Function "$($MyInvocation.MyCommand.Name)" {
      # i'm doing some heavy loading here
      return $something
    }
  }
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Measure-Function</code> takes care of aggregating measurements, and makes sure not to measure recurence invocation. To get the results, do:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>$global:perfcounters | format-table -AutoSize -Wrap | out-string | write-host
</code></pre></div></div>

<p>Now, to pinpoint bottlenecks in your code, you can follow these steps:</p>

<ol>
  <li>Start with the entry point of your script and add <code class="language-plaintext highlighter-rouge">Measure-Function</code> to it and functions that it calls.</li>
  <li>Run the code and see, which function takes the most time.</li>
  <li>Repeat step on with the slowest functions, until you find the bottleneck.</li>
</ol>

<h1 id="powershell-hashtable-quircks">Powershell Hashtable quircks</h1>

<p>One of the things I discovered using aforementioned method was in a place I really wasn’t expecting - enumerating through a hashtable. It should be blazingly fast even in Powershell! As it turns out, it can be awfully slow - if you’re not careful enough.</p>

<p>Take a look at these three simple scenarios :</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># $h is a hastable of size 10000 
$size = 10000
$h = @{
}
for($i = 0; $i -lt $size; $i++) {
    $h += @{ "key$i" = "value$i"  }
}

measure-function "enumerating $($h.count) items by enumerator" {
    foreach ($e in $h.GetEnumerator()) {
        $k = $e.key
        $v = $e.value
    }
}

measure-function "enumerating $($h.count) items by keys" {
    foreach ($k in $h.keys) {
        $v = $h[$k]
    }
}
measure-function "enumerating $($h.count) items with property accessor" {
    foreach ($k in $h.keys) {
        $v = $h.$k
    }
}

$global:perfcounters | format-table -AutoSize -Wrap | out-string | write-host
</code></pre></div></div>

<p>Each loop is enumerating over a hashtable and accessing stored values. Should be a matter of milliseconds, right? Well, let’s see…</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>name                                           elapsed          count
----                                           -------          -----
enumerating 10000 items with property accessor 00:00:30.4342957     1
enumerating 10000 items by keys                00:00:00.0479557     1
enumerating 10000 items by enumerator          00:00:00.1173057     1
</code></pre></div></div>

<p>As it turns out, accessing hashtable keys by property accessor takes ~800 times longer!</p>

<p>At a first glance, I would think that the form <code class="language-plaintext highlighter-rouge">$h.$k</code> would be just a syntactic sugar for <code class="language-plaintext highlighter-rouge">$h[$k]</code>. But it really isn’t (and can’t) be that simple. <code class="language-plaintext highlighter-rouge">$k</code> may not only be a key inside hashtable - it may as well be a property, like <code class="language-plaintext highlighter-rouge">Count</code> or a method like <code class="language-plaintext highlighter-rouge">ContainsKey</code>. So underneath, powershell has to do some really time-consuming stuff, invoking reflection, dynamics, and what not - just to get you a value from hashtable.</p>

<p>The conclusion is simple: if you know you’re working with a potentially big hashtable, don’t go for shortcuts and use plain old <code class="language-plaintext highlighter-rouge">$h[$k]</code>. But if you’re not in a tight loop - just go with what you think is more readable.</p>

<p>Reference:</p>
<ul>
  <li><a href="https://technet.microsoft.com/en-us/library/ee176899.aspx"><code class="language-plaintext highlighter-rouge">Measure-Command</code></a></li>
  <li>There is also 
<a href="http://stackoverflow.com/questions/7523143/powershell-2-and-net-optimize-for-extremely-large-hash-tables">a discussion on powershell hashtable insert</a>.</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Mercurial repository conversion</title>
	  <link>//hg-repo-conversion</link>
	  <author>qbik</author>
	  <pubDate>2017-01-22T00:00:00+01:00</pubDate>
	  <guid>//hg-repo-conversion</guid>
	  <description><![CDATA[
	     <p>Have you ever needed to split a repository, or take out just a few directories, retaining their history? 
Or maybe your repo contains too many (possibly unrelated) projects? 
Or has grown so big that you can’t even clone it?</p>

<p>Mercurial’s <a href="https://www.mercurial-scm.org/wiki/ConvertExtension#Usage">convert extension</a> is here to help. It’s a multitool that can convert from various other VCS, like git, SVN, ect, and from HG. The last one is what we need.</p>

<h1 id="why">Why</h1>

<p>The benefits of splitting large repositories are:</p>

<ul>
  <li>teams can work independently and move at different speeds</li>
  <li>you can give someone (an outsourcer perhaps) access to only some parts of your codebase</li>
  <li>smaller repos are easier to manage</li>
  <li>some CI systems (like appveyor or travis) use a single configuration file per repo - stuffing multiple projects into these files will just complicate the build and obfuscate results</li>
</ul>

<h1 id="powering-up-convert-with-some-scripts">Powering up <code class="language-plaintext highlighter-rouge">convert</code> with some scripts</h1>

<p><code class="language-plaintext highlighter-rouge">convert</code> is a rather low-level tool and needs a few configuration files and commandline options to work the way you want. And let’s face it - you won’t be right for the first time and will need to do some tweaking.</p>

<p>That’s why I created a few powershell scripts and template files to help us with conversion.</p>

<h1 id="configuration">Configuration</h1>

<ol>
  <li>
    <p>Enable the <code class="language-plaintext highlighter-rouge">convert</code> extension in <a href="http://hgtip.com/tips/beginner/2009-09-30-configuring-mercurial/">mercurial.ini</a>:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> [extensions]
 convert =
</code></pre></div>    </div>
  </li>
  <li>
    <p>Clone or download <a href="https://gist.github.com/qbikez/e900456032833fb2baaaee87e19a8ccd">this gist</a>. I recommend creating a separate directory (and possibly version controling it) for every conversion you make  and copying these files there.</p>
  </li>
  <li>
    <p>Create two files: <code class="language-plaintext highlighter-rouge">branchmap.txt</code> and <code class="language-plaintext highlighter-rouge">filemap.txt</code> (you may copy them from <code class="language-plaintext highlighter-rouge">branchmap.sample.txt</code> and <code class="language-plaintext highlighter-rouge">filemap.sample.txt</code>). These are the config files we will use to tell mercurial which directories to inlcude in converted repo and how to treat branches. As you will see, these files support an extended syntax (in comparison to what <code class="language-plaintext highlighter-rouge">convert</code> understands). They are then used to generate <em>real</em> branchmap/filemap files for mercurial.</p>
  </li>
</ol>

<p>Now, we need to fill these config files.</p>

<h2 id="sample-repository">Sample repository</h2>

<p>Let’s use the repo at https://bitbucket.org/heavymetaldev/convert-me as an example. The structure looks like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|-- convert-me
    |-- .hgignore
    |-- top-secret.txt
    |-- sln
    |   |-- MyProject.Core
    |   |   |-- MyProject.Core.sln
    |   |-- MyProject.Desktop
    |       |-- MyProject.Desktop.sln
    |-- src
        |-- MyProject.Core.Api
        |   |-- MyProject.Core.Api.csproj
        |-- MyProject.Core.Model
        |   |-- MyProject.Core.Model.csproj
        |-- MyProject.Core.Utils
        |   |-- MyProject.Core.Utils.csproj
        |-- MyProject.Desktop.WinForms
            |-- MyProject.Desktop.WinForms.csproj
</code></pre></div></div>

<blockquote>
  <p>This repository contains c# projets, but scripts and methods described here can be as well applied to any other mercurial repo.</p>
</blockquote>

<p>There are two solution files <code class="language-plaintext highlighter-rouge">MyProject.Core</code> and <code class="language-plaintext highlighter-rouge">MyProject.Desktop</code>. I want to move these solutions to two separate repositories (<code class="language-plaintext highlighter-rouge">repo-a</code> and <code class="language-plaintext highlighter-rouge">repo-b</code>), along with the projects they refer to). Additionally, I want to remove the toplevel file <code class="language-plaintext highlighter-rouge">top-secret.txt</code>, as it contains confidential data.</p>

<p><code class="language-plaintext highlighter-rouge">Repo A</code> should look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|-- Repo-A
    |-- .hgignore
    |-- sln
    |   |-- MyProject.Core
    |   |   |-- MyProject.Core.sln
    |-- src
        |-- MyProject.Core.Api
        |   |-- MyProject.Core.Api.csproj
        |-- MyProject.Core.Model
        |   |-- MyProject.Core.Model.csproj
        |-- MyProject.Core.Utils
        |   |-- MyProject.Core.Utils.csproj
</code></pre></div></div>

<p><code class="language-plaintext highlighter-rouge">Repo B</code> should contain remaining projects and files:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>|-- Repo-B
    |-- .hgignore
    |-- sln
    |   |-- MyProject.Desktop
    |       |-- MyProject.Desktop.sln
    |-- src
        |-- MyProject.Desktop.WinForms
            |-- MyProject.Desktop.WinForms.csproj
</code></pre></div></div>

<h2 id="filemap-on-steroids">Filemap on steroids</h2>

<p>Let’s start with filemap. It defines, which files or directories should be included (or excluded) in the new repository. You may also use it to rename files.</p>

<p>The extended filemap format supports lines in the following forms:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># this is th basic mercurial stuff:
include path/to/file
exclude path/to/file
rename from/file to/file

# this is extended format:
include r:regex/to/.*/include
include r:!regex/to/.*/include/if/not/match
exclude r:regex/to/.*/exclude
exclude r:!regex/to/.*/exclude/if/not/match
include sln:path/to/something.sln
</code></pre></div></div>

<ul>
  <li><code class="language-plaintext highlighter-rouge">r:</code> indicates that this entry is a regex. <code class="language-plaintext highlighter-rouge">r:!</code> is a negated regex (i.e.: everything that does not match this pattern).</li>
  <li><code class="language-plaintext highlighter-rouge">sln:</code> is specifically for C# solution files. This will parse the <code class="language-plaintext highlighter-rouge">.sln</code> file and generate include entries for every <code class="language-plaintext highlighter-rouge">csproj</code> it contains. In other words, this will include the whole solution.</li>
</ul>

<p>Let’s look at our sample repo. For converting to <code class="language-plaintext highlighter-rouge">repo-a</code>, we can use the following <code class="language-plaintext highlighter-rouge">filemap.txt</code> content:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include .hgignore
include r:.*/MyProject\.Core(\..*){0,1}/
exclude top-secret.txt
</code></pre></div></div>

<blockquote>
  <p>By default, everything that’s not included gets excluded, so the last line isn’t really necessary, but we’ll leave it there for verbosity.</p>
</blockquote>

<p>This will generate the following <code class="language-plaintext highlighter-rouge">filemap.gen.txt</code> for mercurial to use:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include ".hgignore"
include "sln/MyProject.Core"
include "src/MyProject.Core.Api"
include "src/MyProject.Core.Model"
include "src/MyProject.Core.Utils"
include "src/MyProject.Core.Api/App_Data"
include "src/MyProject.Core.Api/App_Start"
include "src/MyProject.Core.Api/Controllers"
include "src/MyProject.Core.Api/Models"
include "src/MyProject.Core.Api/Properties"
include "src/MyProject.Core.Api/Service References"
include "src/MyProject.Core.Api/Service References/Application Insights"
include "src/MyProject.Core.Model/Properties"
include "src/MyProject.Core.Utils/Properties"
remove top-secret.txt
</code></pre></div></div>

<blockquote>
  <p>Some of these entries are in fact obsolete. Once we include a directory, there is no need to include all it’s subdirectories. But since the file is autogenerated, this is not a worry.</p>
</blockquote>

<p>For <code class="language-plaintext highlighter-rouge">repo-b</code>, I will go minimalist and use <code class="language-plaintext highlighter-rouge">sln:</code> prefix:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>include .hgignore
include sln:sln/MyProject.Desktop/MyProject.Desktop.sln
exclude top-secret.txt
</code></pre></div></div>

<h1 id="conversion-process">Conversion Process</h1>

<p>We will use <code class="language-plaintext highlighter-rouge">hg-convert.ps1</code> script to do the conversion. Sample usage:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PS&gt; .\hg-convert path/to/source/convert-me path/to/target/repo-a -startrev 123
</code></pre></div></div>

<p>This script takes care of configuring and calling <code class="language-plaintext highlighter-rouge">hg convert</code>. It will:</p>

<ol>
  <li>Take <code class="language-plaintext highlighter-rouge">filemap.txt</code> (if it exists), generate <code class="language-plaintext highlighter-rouge">filemap.gen.txt</code> and pass it to <code class="language-plaintext highlighter-rouge">convert</code></li>
  <li>Take <code class="language-plaintext highlighter-rouge">branchmap.txt</code> (if it exists), generate <code class="language-plaintext highlighter-rouge">branchmap.gen.txt</code> and pass it to <code class="language-plaintext highlighter-rouge">convert</code> (more of branchmap later)</li>
  <li>Check if the target repository already exists (use <code class="language-plaintext highlighter-rouge">-force</code> to force overwrite)</li>
  <li>Convert the repository at <code class="language-plaintext highlighter-rouge">path/to/source/convert-me</code>, starting at revision <code class="language-plaintext highlighter-rouge">123</code> and save it at <code class="language-plaintext highlighter-rouge">path/to/target/repo-a</code></li>
</ol>

<p><code class="language-plaintext highlighter-rouge">startrev</code> specifies the revision at which the conversion process should start (and convert it and all of its descendants). If you specify <code class="language-plaintext highlighter-rouge">0</code> (default), it will convert whole repository (which may take a considerable time if the repo is big). For testing purpose, I recommend starting with the latest revision. This way, only this one revision will be converted and you can check, if you have included everything you need in the filemap. My process is as follows (this should will save you some time and frustration):</p>

<ol>
  <li>Setup filemap</li>
  <li>
    <p>Convert only the newest revision, using <code class="language-plaintext highlighter-rouge">startrev</code> parameter, i.e:</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> PS&gt; .\hg-convert ../convert-me ../repo-a -startrev 55
</code></pre></div>    </div>
  </li>
  <li>Check the converted repository - try to build everything</li>
  <li>Copy missing files from old repo to the new repo and add them to filemap, until the new repo builds properly</li>
  <li>Repeat from 2. until I get it rigth</li>
  <li>
    <p>Start full conversion from revision 0</p>

    <div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code> PS&gt; .\hg-convert ../convert-me ../repo-a -startrev 0
</code></pre></div>    </div>
  </li>
</ol>

<p>If everything goes rigth, we got now two separate repositories, <code class="language-plaintext highlighter-rouge">repo-a</code> and <code class="language-plaintext highlighter-rouge">repo-b</code>. Notify other developers of the change, so no one tries to push to the old repo (renaming or removing it might also be a good way to prevent this).</p>

<p>But wait, there are also some other scenarios whe should cover.</p>

<h3 id="automated-branchmap">Automated branchmap</h3>

<p>Branchmap defines the mapping between branch names in old repo and new repo. <code class="language-plaintext highlighter-rouge">branchmap.txt</code> support the following line format:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code># this is th basic mercurial stuff:
original_branch_name new_branch_name

# this is extended format:
r:release/.* release
r:!release default
* default
</code></pre></div></div>

<p>Similar to filemap, <code class="language-plaintext highlighter-rouge">r:</code> and <code class="language-plaintext highlighter-rouge">r:!</code> denotes regex to match/notmatch. A single <code class="language-plaintext highlighter-rouge">*</code> means - you guessed it - “everything”.</p>

<p>For example, my <code class="language-plaintext highlighter-rouge">branchmap.txt</code> could look like this:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>* default
r:release/.* release
dev dev
</code></pre></div></div>

<p>All branches that match <code class="language-plaintext highlighter-rouge">release/*</code> pattern will be renamed to <code class="language-plaintext highlighter-rouge">release</code>. Branch <code class="language-plaintext highlighter-rouge">dev</code> will remain <code class="language-plaintext highlighter-rouge">dev</code>. Everything else will be renamed to <code class="language-plaintext highlighter-rouge">default</code>.</p>

<blockquote>
  <p>Note that the order matters here. If a branch matches multiple patterns, the last one will always win. So, start with the most generic one. If you write <code class="language-plaintext highlighter-rouge">* default</code> at the end of file, everything before it will be  effectively ignored. You may want to inspect <code class="language-plaintext highlighter-rouge">branchmap.gen.txt</code> to see, if everything looks like you wanted.</p>
</blockquote>

<h3 id="appending-revisions-to-existing-repo">Appending revisions to existing repo</h3>

<p>The last thing I want to mention is appending parts of history onto one another. Let’s go back to our <code class="language-plaintext highlighter-rouge">convert-me</code> repo. The news of switching to new repositories hasn’t reach one developer, who just pushed some critical changes in <code class="language-plaintext highlighter-rouge">MyProject.Core.Model</code> and <code class="language-plaintext highlighter-rouge">MyProject.Desktop.WinForms</code> in <code class="language-plaintext highlighter-rouge">convert-me</code> repo (instead of <code class="language-plaintext highlighter-rouge">repo-a</code> and <code class="language-plaintext highlighter-rouge">repo-b</code> respectively) - lets call them “offending changes”. How to transfer these changes to new repos without breaking anything? Run <code class="language-plaintext highlighter-rouge">convert</code> again? But this will recreate these repositories, effectively breaking them for everyone who has them checked out.</p>

<p><code class="language-plaintext highlighter-rouge">convert</code> gives us a way to append parts of converted history into an existing repo. And this is exactly what we need in this case. We will:</p>

<ol>
  <li>specify offending changes (starting from the first revision that hasn’t been converted before)</li>
  <li>Check offending changes parent and find corresponding commits in <code class="language-plaintext highlighter-rouge">repo-a</code> and <code class="language-plaintext highlighter-rouge">repo-b</code></li>
  <li>Convert offending changes and append them onto these corresponding parent commits. We will use the same filemaps and branchmaps to filter only required files.</li>
</ol>

<p>Now, that’s it. Hope you find this helpful and if you have any problems with the scripts - please drop me a line!</p>

<h1 id="resources">Resources</h1>

<ul>
  <li>https://www.mercurial-scm.org/wiki/ConvertExtension</li>
  <li>http://hgtip.com/tips/advanced/2009-11-16-using-convert-to-decompose-your-repository/</li>
  <li>https://gist.github.com/qbikez/e900456032833fb2baaaee87e19a8ccd</li>
</ul>

	  ]]></description>
	</item>

	<item>
	  <title>Powershell on Linux</title>
	  <link>//powershell-on-linux</link>
	  <author>qbik</author>
	  <pubDate>2016-08-24T00:00:00+02:00</pubDate>
	  <guid>//powershell-on-linux</guid>
	  <description><![CDATA[
	     <p>A few days ago <a href="https://azure.microsoft.com/en-us/blog/powershell-is-open-sourced-and-is-available-on-linux/">Microsoft has announced Powershell on Linux</a>. You can get it from <a href="https://github.com/powershell/powershell">Powershell’s Github</a>. This is a big announcement and perfectly complies with “Microsoft loves Linux” philosophy.</p>

<p>The installation (here, for Ubuntu 14.04) is pretty straightforward:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="nv">$ </span>wget https://github.com/PowerShell/PowerShell/releases/download/v6.0.0-alpha.9/powershell_6.0.0-alpha.9-1ubuntu1.14.04.1_amd64.deb
<span class="nv">$ </span><span class="nb">sudo </span>apt-get <span class="nb">install </span>libunwind8 libicu52
<span class="nv">$ </span><span class="nb">sudo </span>dpkg <span class="nt">-i</span> powershell_6.0.0-alpha.9-1ubuntu1.14.04.1_amd64.deb</code></pre></figure>

<p>So now, I can do this:</p>

<figure class="highlight"><pre><code class="language-bash" data-lang="bash"><span class="o">&gt;</span> c:<span class="se">\w</span>indows<span class="se">\s</span>ystem32<span class="se">\b</span>ash
<span class="nv">$ </span>whereis powershell
powershell: /usr/bin/powershell
<span class="nv">$ </span>powershell
PS&gt; write-host <span class="s2">"hello world!"</span>
hello world!</code></pre></figure>

<p>Yay, look at that: Powershell on Bash on Windows :)</p>

<p>Of course, the important thing here is that the same works on a <em>real</em> Linux.</p>

<h1 id="what-works">What works?</h1>

<blockquote>
  <p>Note: This is PowerShell <code class="language-plaintext highlighter-rouge">v6.0.0-alpha.9</code>, so you can expect “Alpha-quality” and “things won’t work”.</p>
</blockquote>

<p>Let’s take a look at available preinstalled modules:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">PS</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">Get-Module</span><span class="w"> </span><span class="nt">-ListAvailable</span><span class="w">

    </span><span class="n">Directory:</span><span class="w"> </span><span class="nx">/opt/microsoft/powershell/6.0.0-alpha.9/Modules</span><span class="w">


</span><span class="n">ModuleType</span><span class="w"> </span><span class="nx">Version</span><span class="w">    </span><span class="nx">Name</span><span class="w">                                </span><span class="nx">ExportedCommands</span><span class="w">
</span><span class="o">----------</span><span class="w"> </span><span class="o">-------</span><span class="w">    </span><span class="o">----</span><span class="w">                                </span><span class="o">----------------</span><span class="w">
</span><span class="n">Manifest</span><span class="w">   </span><span class="nx">1.0.1.0</span><span class="w">    </span><span class="nx">Microsoft.PowerShell.Archive</span><span class="w">        </span><span class="p">{</span><span class="n">Compress-Archive</span><span class="p">,</span><span class="w"> </span><span class="nx">Expand-Archive</span><span class="p">}</span><span class="w">
</span><span class="n">Manifest</span><span class="w">   </span><span class="nx">3.0.0.0</span><span class="w">    </span><span class="nx">Microsoft.PowerShell.Host</span><span class="w">           </span><span class="p">{</span><span class="n">Start-Transcript</span><span class="p">,</span><span class="w"> </span><span class="nx">Stop-Transcript</span><span class="p">}</span><span class="w">
</span><span class="n">Manifest</span><span class="w">   </span><span class="nx">3.1.0.0</span><span class="w">    </span><span class="nx">Microsoft.PowerShell.Management</span><span class="w">     </span><span class="p">{</span><span class="n">Add-Content</span><span class="p">,</span><span class="w"> </span><span class="nx">Clear-Content</span><span class="p">,</span><span class="w"> </span><span class="nx">Clear-ItemProperty</span><span class="p">,</span><span class="w"> </span><span class="nx">Join-Path...</span><span class="p">}</span><span class="w">
</span><span class="n">Manifest</span><span class="w">   </span><span class="nx">3.0.0.0</span><span class="w">    </span><span class="nx">Microsoft.PowerShell.Security</span><span class="w">       </span><span class="p">{</span><span class="n">Get-Credential</span><span class="p">,</span><span class="w"> </span><span class="nx">Get-ExecutionPolicy</span><span class="p">,</span><span class="w"> </span><span class="nx">Set-ExecutionPolicy</span><span class="p">,</span><span class="w"> </span><span class="nx">ConvertFrom-SecureString...</span><span class="p">}</span><span class="w">
</span><span class="n">Manifest</span><span class="w">   </span><span class="nx">3.1.0.0</span><span class="w">    </span><span class="nx">Microsoft.PowerShell.Utility</span><span class="w">        </span><span class="p">{</span><span class="n">Format-List</span><span class="p">,</span><span class="w"> </span><span class="nx">Format-Custom</span><span class="p">,</span><span class="w"> </span><span class="nx">Format-Table</span><span class="p">,</span><span class="w"> </span><span class="nx">Format-Wide...</span><span class="p">}</span><span class="w">
</span><span class="n">Binary</span><span class="w">     </span><span class="nx">1.0.0.1</span><span class="w">    </span><span class="nx">PackageManagement</span><span class="w">                   </span><span class="p">{</span><span class="n">Find-Package</span><span class="p">,</span><span class="w"> </span><span class="nx">Get-Package</span><span class="p">,</span><span class="w"> </span><span class="nx">Get-PackageProvider</span><span class="p">,</span><span class="w"> </span><span class="nx">Get-PackageSource...</span><span class="p">}</span><span class="w">
</span><span class="n">Script</span><span class="w">     </span><span class="nx">3.3.9</span><span class="w">      </span><span class="nx">Pester</span><span class="w">                              </span><span class="p">{</span><span class="n">Describe</span><span class="p">,</span><span class="w"> </span><span class="nx">Context</span><span class="p">,</span><span class="w"> </span><span class="nx">It</span><span class="p">,</span><span class="w"> </span><span class="nx">Should...</span><span class="p">}</span><span class="w">
</span><span class="n">Script</span><span class="w">     </span><span class="nx">1.0.0.1</span><span class="w">    </span><span class="nx">PowerShellGet</span><span class="w">                       </span><span class="p">{</span><span class="n">Install-Module</span><span class="p">,</span><span class="w"> </span><span class="nx">Find-Module</span><span class="p">,</span><span class="w"> </span><span class="nx">Save-Module</span><span class="p">,</span><span class="w"> </span><span class="nx">Update-Module...</span><span class="p">}</span><span class="w">
</span><span class="n">Script</span><span class="w">     </span><span class="nx">0.0</span><span class="w">        </span><span class="nx">PSDesiredStateConfiguration</span><span class="w">         </span><span class="p">{</span><span class="n">IsHiddenResource</span><span class="p">,</span><span class="w"> </span><span class="nx">StrongConnect</span><span class="p">,</span><span class="w"> </span><span class="nx">Write-MetaConfigFile</span><span class="p">,</span><span class="w"> </span><span class="nx">Get-InnerMostErrorRecord...</span><span class="p">}</span><span class="w">
</span><span class="n">Script</span><span class="w">     </span><span class="nx">1.2</span><span class="w">        </span><span class="nx">PSReadLine</span><span class="w">                          </span><span class="p">{</span><span class="n">Get-PSReadlineKeyHandler</span><span class="p">,</span><span class="w"> </span><span class="nx">Set-PSReadlineKeyHandler</span><span class="p">,</span><span class="w"> </span><span class="nx">Remove-PSReadlineKeyHandler</span><span class="p">,</span><span class="w"> </span><span class="nx">Get-PSReadlineO...</span></code></pre></figure>

<p>Note that PowerShellGet is available, so you should be able to install modules from <a href="http://powershellgallery.com">Powershell Gallery</a>:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">PS</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">Install-Module</span><span class="w"> </span><span class="nx">PathUtils</span></code></pre></figure>

<p>But this seem to be broken for now:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="w">    </span><span class="n">PackageManagement\Install-Package</span><span class="w"> </span><span class="p">:</span><span class="w"> </span><span class="nx">Could</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">compare</span><span class="w"> </span><span class="s2">"6.0.0-alpha"</span><span class="w"> </span><span class="nx">to</span><span class="w"> </span><span class="s2">"5.0"</span><span class="o">.</span><span class="w"> </span><span class="nx">Error:</span><span class="w">
    </span><span class="s2">"Cannot convert value "</span><span class="mf">5.0</span><span class="s2">" to type "</span><span class="n">System.Management.Automation.SemanticVersion</span><span class="s2">". Error:
    "</span><span class="nx">Cannot</span><span class="w"> </span><span class="nx">process</span><span class="w"> </span><span class="nx">argument</span><span class="w"> </span><span class="nx">because</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="nx">value</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">argument</span><span class="w"> </span><span class="s2">"version"</span><span class="w"> </span><span class="nx">is</span><span class="w"> </span><span class="nx">not</span><span class="w"> </span><span class="nx">valid.</span><span class="w"> </span><span class="nx">Change</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="nx">value</span><span class="w"> </span><span class="nx">of</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="s2">"version"</span><span class="w"> </span><span class="nx">argument</span><span class="w"> </span><span class="nx">and</span><span class="w"> </span><span class="nx">run</span><span class="w"> </span><span class="nx">the</span><span class="w"> </span><span class="nx">operation</span><span class="w"> </span><span class="nx">again.</span></code></pre></figure>

<p>There already is a <a href="https://github.com/bmanikm/PowerShell/commit/97eb76cf9841faf1754028842ee5a1eb11516538">fix for this particular problem</a>. If you want to use that patch:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="err">$</span><span class="w"> </span><span class="n">sudo</span><span class="w"> </span><span class="nx">cp</span><span class="w"> </span><span class="nx">/opt/microsoft/powershell/6.0.0-alpha.9/Modules/PowerShellGet/PSModule.psm1</span><span class="w"> </span><span class="nx">/opt/microsoft/powershell/6.0.0-alpha.9/Modules/PowerShellGet/PSModule.psm1.bak</span><span class="w">
</span><span class="err">$</span><span class="w"> </span><span class="n">sudo</span><span class="w"> </span><span class="nx">wget</span><span class="w"> </span><span class="nx">https://raw.githubusercontent.com/bmanikm/PowerShell/97eb76cf9841faf1754028842ee5a1eb11516538/src/Modules/Shared/PowerShellGet/PSModule.psm1</span><span class="w"> </span><span class="nt">-O</span><span class="w"> </span><span class="nx">/opt/microsoft/powershell/6.0.0-alpha.9/Modules/PowerShellGet/PSModule.psm1</span></code></pre></figure>

<p>And voila, <code class="language-plaintext highlighter-rouge">Install-Module</code> works.</p>

<blockquote>
  <p>Watch out: Unix is case-sensitive! Although Powershell is not, you have to use the right casing of module names. So <code class="language-plaintext highlighter-rouge">Import-Module PathUtils</code> will work, whereas <code class="language-plaintext highlighter-rouge">Import-Module pathutils</code> will fail. Also, the name of the psd1 file has to match exactly the name of the module (this is important for module maintainers).</p>
</blockquote>

<h1 id="open-source-everything">Open source everything</h1>

<p>As excited as I am with running PowerShell scripts on Linux, I think that the most important thing here is the open sourcing of PowerShell. If Microsoft didn’t prepare a version that runs on Linux, some other geek would probably do it (sooner or later).
But the fact that I can now look into PS source code and see, how they do things, then tinker around and send a pull request is really amazing. I’ve been using Asp.Net Core for some time now and the possibility to just look at the source code proven invaluable a cuple of times.</p>

<blockquote>
  <p>It’s worth mentioning that there already exists an open source effort to reimplement Powershell: <a href="https://github.com/Pash-Project/Pash">Pash</a>. I wonder what will become of it now.</p>
</blockquote>

<h1 id="possiblities">Possiblities</h1>

<p>Taking aside the excitement of “because I can”, what are real benefits of using PowerShell on Linux, when you have Bash available at your disposal?</p>

<h2 id="build-scripts">Build scripts</h2>

<p>Up until now, cross platform .Net projects, like Dotnet CLI itself, used separate build scripts for Linux and Windows. Now, it will be possible to write one PowerShell script to rule them all. I personally have tons of build/deploy/other DevOps scripts written in PowerShell (and DSC). I would rather gladly test them on Linux and work around the rough edges than rewrite all that stuff in Bash (and maintain two separate versions).</p>

<p>If you think of dockerizing your services, the possibility to use the same scripts on Linux and Windows should make the transition much smoother.</p>

<h2 id="managing-the-cloud">Managing the cloud</h2>

<p>If you are managing multiple Linux and Windows machines, you will be able to use the same shell and scripts for all of them. Also, as MS announcement says:</p>

<blockquote>
  <p>We will be extending the PowerShell Remoting Protocol (MS-PSRP) to use OpenSSH as a native transport. Users will have the option to use SSH or WINRM as a transport.</p>
</blockquote>

<p>So, you will be able to do something like:</p>

<figure class="highlight"><pre><code class="language-powershell" data-lang="powershell"><span class="n">PS</span><span class="err">&gt;</span><span class="w"> </span><span class="nx">Invoke-Command</span><span class="w"> </span><span class="nt">-ComputerName</span><span class="w"> </span><span class="nx">MyLinux</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="n">wtite-host</span><span class="w"> </span><span class="s2">"this is me executing remotely"</span><span class="w"> </span><span class="p">}</span></code></pre></figure>

<p>And that will work over SSH, without the struggle of setting up WINRM.</p>

<h1 id="whats-next">What’s next</h1>

<p>As of today, there are <a href="https://github.com/powershell/powershell/issues">322 issues</a>, so Powershell 6 has some way to go before it’s “production ready”. But I’m not waiting until then - I’m starting to make my scripts and modules “cross-platform” with PowerShell 6 right now.</p>

	  ]]></description>
	</item>

	<item>
	  <title>IIS Web Deploy permissions (with PowerShell)</title>
	  <link>//iis-web-deploy-permissions</link>
	  <author>qbik</author>
	  <pubDate>2016-08-07T00:00:00+02:00</pubDate>
	  <guid>//iis-web-deploy-permissions</guid>
	  <description><![CDATA[
	     <p>Web Deploy is a great way to publish websites if you use Windows + IIS hosting, especially inside company’s infrastructure.</p>

<p>Why do I like it:</p>

<ul>
  <li>It can be used from Visual Studio as well as from commandline - this means developers can publish right from VS, without any additional tools, but also script and commandline freaks like me can automate it</li>
  <li>It only syncs modified files - if you have low bandwith, deploy often or have large sites - it beats other methods that require full package to be deployed every time</li>
  <li>Active Directory can be used for authentication</li>
</ul>

<h1 id="allowing-a-user-to-publish-with-web-deploy">Allowing a user to publish with Web Deploy</h1>

<p>The goal is to allow non-administrator user to publish IIS website using Web Deploy.</p>

<p>There are two parts here:</p>

<ol>
  <li>Add IIS Manager permissions</li>
  <li>Add File System permissions</li>
</ol>

<p>If you like clicking through it, see <a href="https://www.iis.net/learn/install/installing-publishing-technologies/installing-and-configuring-web-deploy-on-iis-80-or-later">Installing and Configuring Web Deploy on IIS 8.0 or Later</a>. Remember that you should also add appropriate permissions to site’s physical folder or else the user won’t be able to publish any files.</p>

<p>If you want to do it from commandline, here’s a snippet for <a href="https://blogs.iis.net/carlosag/adding-iis-manager-users-and-permissions-using-powershell">setting IIS Manager permissions</a>:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="p">[</span><span class="n">System.Reflection.Assembly</span><span class="p">]::</span><span class="n">LoadWithPartialName</span><span class="p">(</span><span class="s2">"Microsoft.Web.Management"</span><span class="p">)</span><span class="w"> 
</span><span class="p">[</span><span class="n">Microsoft.Web.Management.Server.ManagementAuthorization</span><span class="p">]::</span><span class="n">Grant</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="w"> </span><span class="s2">"</span><span class="nv">$site</span><span class="s2">"</span><span class="p">,</span><span class="w"> </span><span class="bp">$false</span><span class="p">)</span><span class="w"> 
</span></code></pre></div></div>

<p>Then, use <code class="language-plaintext highlighter-rouge">Set-Acl</code> to set physical path permissions. Here’s a full script:</p>

<div class="language-powershell highlighter-rouge"><div class="highlight"><pre class="highlight"><code><span class="cm">&lt;#
</span><span class="cs">.SYNOPSIS</span><span class="cm">

adds ACL rules to specific path. it's a helper wrapper for Set-ACL from Microsoft.PowerShell.Security   

#&gt;</span><span class="w">

</span><span class="kr">function</span><span class="w"> </span><span class="nf">set-acl2</span><span class="p">(</span><span class="w">
</span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$true</span><span class="p">)]</span><span class="w"> </span><span class="nv">$path</span><span class="p">,</span><span class="w"> 
</span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$true</span><span class="p">)]</span><span class="w"> </span><span class="p">[</span><span class="n">System.Security.AccessControl.FileSystemRights</span><span class="p">]</span><span class="w"> </span><span class="nv">$rights</span><span class="p">,</span><span class="w"> 
</span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$true</span><span class="p">)]</span><span class="w"> </span><span class="nv">$user</span><span class="p">,</span><span class="w">
</span><span class="p">[</span><span class="n">System.Security.AccessControl.InheritanceFlags</span><span class="p">]</span><span class="w">  </span><span class="nv">$InheritanceFlag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">System.Security.AccessControl.InheritanceFlags</span><span class="p">]::</span><span class="n">None</span><span class="p">,</span><span class="w">
 </span><span class="p">[</span><span class="n">System.Security.AccessControl.PropagationFlags</span><span class="p">]</span><span class="w"> </span><span class="nv">$PropagationFlag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">System.Security.AccessControl.PropagationFlags</span><span class="p">]::</span><span class="n">None</span><span class="w">
</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w">
    </span><span class="nv">$colRights</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$rights</span><span class="w">

    </span><span class="nv">$PropagationFlag</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">[</span><span class="n">System.Security.AccessControl.PropagationFlags</span><span class="p">]::</span><span class="n">None</span><span class="w"> 

    </span><span class="nv">$objType</span><span class="w"> </span><span class="o">=</span><span class="p">[</span><span class="n">System.Security.AccessControl.AccessControlType</span><span class="p">]::</span><span class="n">Allow</span><span class="w"> 

    </span><span class="nv">$objUser</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Security.Principal.NTAccount</span><span class="p">(</span><span class="nv">$user</span><span class="p">)</span><span class="w"> 

    </span><span class="nv">$objACE</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">New-Object</span><span class="w"> </span><span class="nx">System.Security.AccessControl.FileSystemAccessRule</span><span class="w"> </span><span class="p">(</span><span class="nv">$objUser</span><span class="p">,</span><span class="w"> </span><span class="nv">$colRights</span><span class="p">,</span><span class="w"> </span><span class="nv">$InheritanceFlag</span><span class="p">,</span><span class="w"> </span><span class="nv">$PropagationFlag</span><span class="p">,</span><span class="w"> </span><span class="nv">$objType</span><span class="p">)</span><span class="w"> 

    </span><span class="nv">$objACL</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="p">(</span><span class="n">Get-Item</span><span class="w"> </span><span class="nv">$path</span><span class="p">)</span><span class="o">.</span><span class="nf">GetAccessControl</span><span class="p">(</span><span class="s1">'Access'</span><span class="p">)</span><span class="c">#(Get-ACL $path).GetAccessControl('Access')</span><span class="w">
    </span><span class="nv">$objACL</span><span class="o">.</span><span class="nf">AddAccessRule</span><span class="p">(</span><span class="nv">$objACE</span><span class="p">)</span><span class="w"> 

    </span><span class="n">Set-ACL</span><span class="w"> </span><span class="nt">-Path</span><span class="w"> </span><span class="nv">$path</span><span class="w"> </span><span class="nt">-AclObject</span><span class="w"> </span><span class="nv">$objACL</span><span class="w">
</span><span class="p">}</span><span class="w">

</span><span class="cm">&lt;#

</span><span class="cs">.SYNOPSIS</span><span class="cm"> 
Allows the specified user to publish website through webdeploy

#&gt;</span><span class="w">    
</span><span class="kr">function</span><span class="w"> </span><span class="nf">allow-iiswebdeploy</span><span class="w"> </span><span class="p">{</span><span class="w">
</span><span class="kr">param</span><span class="p">(</span><span class="w">
    </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$true</span><span class="p">)]</span><span class="w"> </span><span class="nv">$username</span><span class="p">,</span><span class="w">
    </span><span class="p">[</span><span class="n">Parameter</span><span class="p">(</span><span class="n">Mandatory</span><span class="o">=</span><span class="bp">$true</span><span class="p">)]</span><span class="w"> </span><span class="nv">$site</span><span class="p">,</span><span class="w">
    </span><span class="p">[</span><span class="n">Switch</span><span class="p">][</span><span class="n">bool</span><span class="p">]</span><span class="w"> </span><span class="nv">$isgroup</span><span class="w">
</span><span class="p">)</span><span class="w">

    </span><span class="n">ipmo</span><span class="w"> </span><span class="nx">webadministration</span><span class="w">


    </span><span class="nv">$iissite</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="n">get-item</span><span class="w"> </span><span class="s2">"iis:\sites\</span><span class="nv">$site</span><span class="s2">"</span><span class="w"> </span><span class="nt">-ErrorAction</span><span class="w"> </span><span class="nx">Stop</span><span class="w">

    </span><span class="kr">if</span><span class="w"> </span><span class="p">(</span><span class="nv">$iissite</span><span class="w"> </span><span class="o">-eq</span><span class="w"> </span><span class="bp">$null</span><span class="p">)</span><span class="w"> </span><span class="p">{</span><span class="w"> </span><span class="kr">throw</span><span class="w"> </span><span class="s2">"site '</span><span class="nv">$site</span><span class="s2">' not found"</span><span class="w"> </span><span class="p">}</span><span class="w">

    </span><span class="c"># add  IIS Manager Users and Permissions</span><span class="w">
    </span><span class="c"># from: https://blogs.iis.net/carlosag/adding-iis-manager-users-and-permissions-using-powershell</span><span class="w">

    </span><span class="p">[</span><span class="n">System.Reflection.Assembly</span><span class="p">]::</span><span class="n">LoadWithPartialName</span><span class="p">(</span><span class="s2">"Microsoft.Web.Management"</span><span class="p">)</span><span class="w"> 
    </span><span class="p">[</span><span class="n">Microsoft.Web.Management.Server.ManagementAuthorization</span><span class="p">]::</span><span class="n">Grant</span><span class="p">(</span><span class="nv">$username</span><span class="p">,</span><span class="w"> </span><span class="s2">"</span><span class="nv">$site</span><span class="s2">"</span><span class="p">,</span><span class="w"> </span><span class="nv">$isgroup</span><span class="p">)</span><span class="w"> 

    </span><span class="c"># grant file system permissions!</span><span class="w">

    </span><span class="nv">$dir</span><span class="w"> </span><span class="o">=</span><span class="w"> </span><span class="nv">$iissite</span><span class="o">.</span><span class="nf">physicalPath</span><span class="w">
    
    </span><span class="n">set-acl2</span><span class="w"> </span><span class="nt">-path</span><span class="w"> </span><span class="nv">$dir</span><span class="w"> </span><span class="nt">-rights</span><span class="w"> </span><span class="nx">CreateFiles</span><span class="p">,</span><span class="nx">Delete</span><span class="p">,</span><span class="nx">Modify</span><span class="p">,</span><span class="nx">CreateDirectories</span><span class="p">,</span><span class="nx">ReadAndExecute</span><span class="w"> </span><span class="nt">-user</span><span class="w"> </span><span class="nv">$username</span><span class="w"> </span><span class="nt">-InheritanceFlag</span><span class="w"> </span><span class="nx">ObjectInherit</span><span class="p">,</span><span class="nx">ContainerInherit</span><span class="w"> 
</span><span class="p">}</span><span class="w">
</span></code></pre></div></div>

<p>Just call:</p>

<div class="language-plaintext highlighter-rouge"><div class="highlight"><pre class="highlight"><code>PS&gt; allow-iiswebdeploy -username "MYDOMAIN\user" -site "Default Web Site"
</code></pre></div></div>

<p>And that’s it! Note that site’s physical path is obtained directly from IIS.</p>

<h1 id="resources">Resources</h1>

<p>https://www.iis.net/learn/publish/using-web-deploy/web-deploy-powershell-cmdlets</p>

	  ]]></description>
	</item>


</channel>
</rss>
