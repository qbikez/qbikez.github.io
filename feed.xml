<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Heavy Metal Dev - Articles</title>
    <description>Developer stories from the trenches.</description>
    <link>
    http://heavymetaldev.com</link>
    
      
      <item>
        <title>Build private mercurial subrepos on Appveyor</title>
        
          <description>&lt;p&gt;Appveyor is a great CI service for Windows apps. It&amp;#39;s simple, free (for open-source) and easy to setup. In this post, I want to talk a little bit more about the &amp;quot;free&amp;quot; part. You may have a repository that&amp;#39;s public and open-source but still uses some private bits that are referenced as private repositories. &lt;/p&gt;
</description>
        
        <pubDate>Sun, 08 Jan 2017 00:00:00 +0100</pubDate>
        <link>
        http://heavymetaldev.com/appveyor-private-subrepos</link>
        <guid isPermaLink="true">http://heavymetaldev.com/appveyor-private-subrepos</guid>
      </item>
      
    
      
      <item>
        <title>Powershell on Linux</title>
        
          <description>Powershell is now Open Source. This perfectly complies with “Microsoft loves Linux” philosophy. Hardcore Bash users will probably ignore it anyway, but for many PowerShell fans that also work with Linux systems it will be a big treat.</description>
        
        <pubDate>Wed, 24 Aug 2016 00:00:00 +0200</pubDate>
        <link>
        http://heavymetaldev.com/powershell-on-linux</link>
        <guid isPermaLink="true">http://heavymetaldev.com/powershell-on-linux</guid>
      </item>
      
    
      
      <item>
        <title>Migrating Asp.Net 5 rc1 to Asp.Net Core 1.0.0</title>
        
          <description>&lt;p&gt;Net Core 1.0.0 has been released some time ago and is here to stay. Maybe it&amp;#39;s time to move &amp;quot;old&amp;quot; &lt;code&gt;dnx&lt;/code&gt; projects forward and switch to &lt;code&gt;dotnet&lt;/code&gt;? Because, as someone avesome said: &lt;em&gt;new is always better!&lt;/em&gt;&lt;/p&gt;
</description>
        
        <pubDate>Sat, 30 Jul 2016 12:18:00 +0200</pubDate>
        <link>
        http://heavymetaldev.com/dnx-to-dotnet-migration</link>
        <guid isPermaLink="true">http://heavymetaldev.com/dnx-to-dotnet-migration</guid>
      </item>
      
    
      
      <item>
        <title>.Net Core 1.0 Released!</title>
        
          <description>&lt;p&gt;This came as a little surprise for me, especially that rc2 was released not so long ago, but here it is! &lt;a href=&quot;http://www.hanselman.com/blog/NETCore10IsNowReleased.aspx&quot;&gt;.Net Core 1.0 is finally released&lt;/a&gt;. &lt;/p&gt;
</description>
        
        <pubDate>Tue, 28 Jun 2016 00:00:00 +0200</pubDate>
        <link>
        http://heavymetaldev.com/net-core-1-0-released</link>
        <guid isPermaLink="true">http://heavymetaldev.com/net-core-1-0-released</guid>
      </item>
      
    
      
      <item>
        <title>Sharing code between aspnet5 and &quot;old&quot; .net</title>
        
          <description>&lt;p&gt;If you want to share some common code between &lt;code&gt;aspnet5&lt;/code&gt; and regular &lt;code&gt;csproj&lt;/code&gt; projects, you basically have three options:
 * create a nuget from the common library and push it to a shared nuget repository&lt;br&gt;
 * use &lt;code&gt;dnu wrap&lt;/code&gt; to wrap existing &lt;code&gt;csproj&lt;/code&gt; into aspnet5 &lt;code&gt;project.json&lt;/code&gt; 
 * maintain two versions of your shared project - a  &lt;code&gt;project.json&lt;/code&gt; for aspnet5 and a &lt;code&gt;csproj&lt;/code&gt; for regular .net&lt;/p&gt;

&lt;p&gt;The last option is the most error-prone and harder to maintain, so I will just ignore it.   &lt;/p&gt;
</description>
        
        <pubDate>Thu, 03 Dec 2015 00:00:00 +0100</pubDate>
        <link>
        http://heavymetaldev.com/aspnet5-reference-csproj</link>
        <guid isPermaLink="true">http://heavymetaldev.com/aspnet5-reference-csproj</guid>
      </item>
      
    
      
      <item>
        <title>ReflectionTypeLoadException when running dnx (aspnet5)</title>
        
          <description>&lt;p&gt;Today I ran into a problem with starting my AspNet5 app. (for the record, I&amp;#39;m using aspnet version &lt;code&gt;1.0.0-beta8&lt;/code&gt;) This is what happened:&lt;/p&gt;
</description>
        
        <pubDate>Thu, 26 Nov 2015 00:00:00 +0100</pubDate>
        <link>
        http://heavymetaldev.com/aspnet5-reflectiontypeloadexception</link>
        <guid isPermaLink="true">http://heavymetaldev.com/aspnet5-reflectiontypeloadexception</guid>
      </item>
      
    
      
      <item>
        <title>Azure MIME mapping</title>
        
          <description>&lt;p&gt;It turns out that Azure Websites have some MIME mapping problems that a default IIS installation has not.&lt;/p&gt;
</description>
        
        <pubDate>Wed, 18 Nov 2015 00:00:00 +0100</pubDate>
        <link>
        http://heavymetaldev.com/azure-mime-mapping</link>
        <guid isPermaLink="true">http://heavymetaldev.com/azure-mime-mapping</guid>
      </item>
      
    
  </channel>
</rss>
