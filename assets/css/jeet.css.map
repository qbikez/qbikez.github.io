{
	"version": 3,
	"file": "jeet.css",
	"sources": [
		"jeet.scss",
		"node_modules/jeet/scss/index.scss",
		"node_modules/jeet/scss/_settings.scss",
		"node_modules/jeet/scss/_functions.scss",
		"node_modules/jeet/scss/_grid.scss"
	],
	"sourcesContent": [
		"@import 'node_modules/jeet/scss/index';\n\ndiv {\n    /* leave it here ? */\n}",
		"// API Quick Reference\r\n// -------------------\r\n// column($ratios: 1, $offset: 0, $cycle: 0, $gutter: map-get($jeet, 'gutter'))\r\n// column-width($ratios: 1, $gutter: map-get($jeet, 'gutter'))\r\n// column-gutter($ratios: 1, $gutter: map-get($jeet, 'gutter'))\r\n// span($ratio: 1, $offset: 0, $cycle: 0)\r\n// move($ratios: 0, $col-or-span: column, $gutter: map-get($jeet, 'gutter'))\r\n// unmove()\r\n// debug($color: blue, $important: false)\r\n// center($max-width: map-get($jeet, 'max-width'), $pad: 0)\r\n// uncenter()\r\n// stack($pad: 0, $align: false)\r\n// unstack()\r\n// align($direction: both)\r\n// clearfix()\r\n\r\n@import '_settings';\r\n@import '_functions';\r\n@import '_grid';\r\n",
		"$jeet: (\r\n  gutter: 3,\r\n  max-width: 1440px,\r\n  layout-direction: LTR,\r\n  parent-first: false,\r\n  nth: child\r\n);\r\n",
		"// List functions courtesy of Team Sass.\r\n\r\n// Get  percentage from a given ratio.\r\n@function _get-span($ratio: 1) {\r\n  @return $ratio * 100;\r\n}\r\n\r\n// Work out the column widths based on the ratio and gutter sizes.\r\n@function _get-column($ratios: 1, $gutter: map-get($jeet, 'gutter')) {\r\n  $ratios: if(not map-get($jeet, 'parent-first'), _reverse($ratios), $ratios);\r\n  $width: 100;\r\n\r\n  @each $ratio in $ratios {\r\n    $gutter: $gutter / $width * 100;\r\n    $width: 100 * $ratio - $gutter + $ratio * $gutter;\r\n  }\r\n\r\n  @return $width $gutter;\r\n}\r\n\r\n// Get the set layout direction for the project.\r\n@function _get-layout-direction() {\r\n  $direction: if(map-get($jeet, 'layout-direction') == 'RTL', right, left);\r\n\r\n  @return $direction;\r\n}\r\n\r\n// Replace a specified list value with a new value (uses built in set-nth() if available)\r\n@function _replace-nth($list, $index, $value) {\r\n  // Fallback for Sass 3.2\r\n  @if function-exists('set-nth') != true {\r\n    $result: ();\r\n    $index: if($index < 0, length($list) + $index + 1, $index);\r\n\r\n    @for $i from 1 through length($list) {\r\n      $result: append($result, if($i == $index, $value, nth($list, $i)));\r\n    }\r\n\r\n    @return $result;\r\n  }\r\n\r\n  // Sass 3.3\r\n  $result: set-nth($list, $index, $value);\r\n\r\n  @return $result;\r\n}\r\n\r\n// Reverse a list (progressively enhanced for Sass 3.3)\r\n@function _reverse($list) {\r\n  // Sass 3.2\r\n  @if function-exists('set-nth') != true {\r\n    $result: ();\r\n\r\n    @for $i from length($list) * -1 through -1 {\r\n      $result: append($result, nth($list, abs($i)));\r\n    }\r\n\r\n    @return $result;\r\n  }\r\n\r\n  // Sass 3.3\r\n  @for $i from 1 through floor(length($list) / 2) + 1 {\r\n    $tmp: nth($list, $i);\r\n    $list: set-nth($list, $i, nth($list, -$i));\r\n    $list: set-nth($list, -$i, $tmp);\r\n  }\r\n\r\n  @return $list;\r\n}\r\n\r\n// Get the opposite direction to a given value.\r\n@function _opposite-direction($direction) {\r\n  @if $direction == 'left' {\r\n    @return right;\r\n  } @else if $direction == 'right' {\r\n    @return left;\r\n  } @else if $direction == 'top' {\r\n    @return bottom;\r\n  } @else if $direction == 'bottom' {\r\n    @return top;\r\n  } @else if index('ltr' 'LTR', $direction) {\r\n    @return rtl;\r\n  } @else if index('rtl' 'RTL', $direction) {\r\n    @return ltr;\r\n  } @else {\r\n    @warn '`#{$direction}` is not a direction; please make sure your direction is all lowercase.';\r\n    @return false;\r\n  }\r\n}\r\n",
		"@mixin column($ratios: 1, $offset: 0, $cycle: 0, $gutter: map-get($jeet, 'gutter'), $clearfix: true, $nth: map-get($jeet, 'nth')) {\r\n  $side: _get-layout-direction();\r\n  $opposite-side: _opposite-direction($side);\r\n  $column-widths: _get-column($ratios, $gutter);\r\n  $margin-last: 0;\r\n  $margin-l: $margin-last;\r\n  $margin-r: nth($column-widths, 2);\r\n  $nth-selector: \"nth-child\";\r\n  @if $nth == \"type\" {\r\n    $nth-selector: \"nth-of-type\";\r\n  }\r\n\r\n  @if $offset != 0 {\r\n    @if $offset < 0 {\r\n      $offset: $offset * -1;\r\n      $offset: nth(_get-column($offset, nth($column-widths, 2)), 1);\r\n      $margin-last: $offset + nth($column-widths, 2) * 2;\r\n      $margin-r: $margin-last;\r\n    } @else {\r\n      $offset: nth(_get-column($offset, nth($column-widths, 2)), 1);\r\n      $margin-l: $offset + nth($column-widths, 2);\r\n    }\r\n  }\r\n\r\n  @if $clearfix {\r\n    @include clearfix;\r\n  }\r\n\r\n  float: $side;\r\n  clear: none;\r\n  text-align: inherit;\r\n  width: nth($column-widths, 1) * 1%;\r\n  margin: {\r\n    #{$side}: $margin-l * 1%;\r\n    #{$opposite-side}: $margin-r * 1%;\r\n  };\r\n\r\n  @if $cycle != 0 {\r\n    &:#{$nth-selector}(n) {\r\n      margin-#{_opposite-direction($side)}: $margin-r * 1%;\r\n      float: $side;\r\n      clear: none;\r\n    }\r\n\r\n    &:#{$nth-selector}(#{$cycle}n) {\r\n      margin-#{_opposite-direction($side)}: $margin-last * 1%;\r\n      float: _opposite-direction($side);\r\n    }\r\n\r\n    &:#{$nth-selector}(#{$cycle}n + 1) {\r\n      clear: both;\r\n    }\r\n  } @else {\r\n    &:last-child {\r\n      margin-#{_opposite-direction($side)}: $margin-last * 1%;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@function column-width($ratios: 1, $gutter: map-get($jeet, 'gutter')) {\r\n  @if (map-get($jeet, 'parent-first') != 'true') {\r\n    $ratios: _reverse($ratios);\r\n  }\r\n\r\n  $w: 100;\r\n\r\n  @each $ratio in $ratios {\r\n    $w: 100 * $ratio - $gutter + $ratio * $gutter;\r\n  }\r\n\r\n  @return unquote($w + '%');\r\n}\r\n\r\n\r\n@function column-gutter($ratios: 1, $gutter: map-get($jeet, 'gutter')) {\r\n  @if (map-get($jeet, 'parent-first') != 'true') {\r\n    $ratios: _reverse($ratios);\r\n  }\r\n\r\n  $w: 100;\r\n\r\n  @each $ratio in $ratios {\r\n    $gutter: $gutter / $w * 100;\r\n  }\r\n\r\n  @return unquote($gutter + '%');\r\n}\r\n\r\n\r\n@mixin span($ratio: 1, $offset: 0, $cycle: 0, $clearfix: true, $nth: map-get($jeet, \"nth\")) {\r\n  $side: _get-layout-direction();\r\n  $opposite-side: _opposite-direction($side);\r\n  $span-width: _get-span($ratio);\r\n  $margin-r: 0;\r\n  $margin-l: $margin-r;\r\n  $nth-selector: \"nth-child\";\r\n  @if $nth == \"type\" {\r\n    $nth-selector: \"nth-of-type\";\r\n  }\r\n\r\n  @if $offset != 0 {\r\n    @if $offset < 0 {\r\n      $offset: $offset * -1;\r\n      $margin-r: _get-span($offset);\r\n    } @else {\r\n      $margin-l: _get-span($offset);\r\n    }\r\n  }\r\n\r\n  @if $clearfix {\r\n    @include clearfix;\r\n  }\r\n\r\n  float: $side;\r\n  clear: none;\r\n  text-align: inherit;\r\n  width: $span-width * 1%;\r\n  margin: {\r\n    #{$side}: $margin-l * 1%;\r\n    #{$opposite-side}: $margin-r * 1%;\r\n  };\r\n\r\n  @if $cycle != 0 {\r\n    &:#{$nth-selector}(n) {\r\n      float: $side;\r\n      clear: none;\r\n    }\r\n\r\n    &:#{$nth-selector}(#{$cycle}n) {\r\n      float: _opposite-direction($side);\r\n    }\r\n\r\n    &:#{$nth-selector}(#{$cycle}n + 1) {\r\n      clear: both;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@mixin move($ratios: 0, $col-or-span: column, $gutter: map-get($jeet, 'gutter')) {\r\n  $translate: '';\r\n  $side: _get-layout-direction();\r\n\r\n  @if $side == right {\r\n    $ratios: _replace-nth($ratios, 0, nth($ratios, 1) * -1);\r\n  }\r\n\r\n  @if index(\"column\" \"col\" \"c\", $col-or-span) {\r\n    $column-widths: _get-column($ratios, $gutter);\r\n    $translate: nth($column-widths, 1) + nth($column-widths, 2);\r\n  } @else {\r\n    $translate: _get-span($ratios);\r\n  }\r\n\r\n  position: relative;\r\n  left: $translate * 1%;\r\n}\r\n\r\n\r\n@mixin unmove() {\r\n  position: static;\r\n  left: 0;\r\n}\r\n\r\n\r\n@mixin debug($color: blue, $important: false) {\r\n  @if $important {\r\n    * {\r\n      background: rgba($color, .05) !important;\r\n    }\r\n  } @else {\r\n    * {\r\n      background: rgba($color, .05);\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@mixin center($max-width: map-get($jeet, 'max-width'), $pad: 0) {\r\n  @include clearfix;\r\n  width: auto;\r\n  max-width: $max-width;\r\n  float: none;\r\n  display: block;\r\n  margin: {\r\n    right: auto;\r\n    left:  auto;\r\n  };\r\n  padding: {\r\n    left:  $pad;\r\n    right: $pad;\r\n  };\r\n}\r\n\r\n\r\n@mixin uncenter() {\r\n  max-width: none;\r\n  margin-right: 0;\r\n  margin-left: 0;\r\n  padding-left: 0;\r\n  padding-right: 0;\r\n}\r\n\r\n\r\n@mixin stack($pad: 0, $align: false) {\r\n  $side: _get-layout-direction();\r\n  $opposite-side: _opposite-direction($side);\r\n\r\n  display: block;\r\n  clear: both;\r\n  float: none;\r\n  width: 100%;\r\n  margin: {\r\n    left:  auto;\r\n    right: auto;\r\n  };\r\n\r\n  &:first-child {\r\n    margin-#{$side}: auto;\r\n  }\r\n\r\n  &:last-child {\r\n    margin-#{$opposite-side}: auto;\r\n  }\r\n\r\n  @if $pad != 0 {\r\n    padding: {\r\n      left:  $pad;\r\n      right: $pad;\r\n    }\r\n  }\r\n\r\n  @if ($align is not false) {\r\n    @if index(\"center\" \"c\", $align) {\r\n      text-align: center;\r\n    } @else if index(\"left\" \"l\", $align) {\r\n      text-align: left;\r\n    } @else if index(\"right\" \"r\", $align) {\r\n      text-align: right;\r\n    }\r\n  }\r\n}\r\n\r\n\r\n@mixin unstack() {\r\n  $side: _get-layout-direction();\r\n  $opposite-side: _opposite-direction($side);\r\n\r\n  text-align: $side;\r\n  display: inline;\r\n  clear: none;\r\n  width: auto;\r\n  margin: {\r\n    left:  0;\r\n    right: 0;\r\n  };\r\n\r\n  &:first-child {\r\n    margin-#{$side}: 0;\r\n  }\r\n\r\n  &:last-child {\r\n    margin-#{_opposite-direction($side)}: 0;\r\n  }\r\n}\r\n\r\n\r\n@mixin align($direction: both) {\r\n  position: absolute;\r\n  transform-style: preserve-3d;\r\n\r\n  @if index(\"horizontal\" \"h\", $direction) {\r\n    left: 50%;\r\n    transform: translateX(-50%);\r\n  } @else if index(\"vertical\" \"v\", $direction) {\r\n    top: 50%;\r\n    transform: translateY(-50%);\r\n  } @else {\r\n    top: 50%;\r\n    left: 50%;\r\n    transform: translate(-50%, -50%);\r\n  }\r\n}\r\n\r\n\r\n@mixin clearfix() {\r\n  &::after {\r\n    content: '';\r\n    display: table;\r\n    clear: both;\r\n  }\r\n}\r\n"
	],
	"names": [],
	"mappings": "AAEA,AAAA,GAAG,CAAC,EACA,qBAAqB,EACxB"
}